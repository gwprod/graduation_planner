<?php

/**
 * @file
 * Include file for department users.
 */

/**
 * Get a list of the departments of the logged-in user.
 *
 * @global object $user
 *   The logged-in user
 * @return array
 *   Returns a renderable array of departments.
 */
function graduation_planner_department_my_departments() {

  global $user;

  // Query which accesses the graduation_planner_department_member table.
  $query = db_select('graduation_planner_department_member', 'gpdm');

  // Add department_id as a field.
  $query->fields('gpdm', array('department_id'));

  // Add a condition based on the uid of the logged-in user.
  $query->condition('gpdm.uid', $user->uid);

  // Get the result from the query.
  $result = $query->execute();

  // Retrieve the department_ids from the resultset.
  $department_ids = $result->fetchAllAssoc('department_id');

  // Load departments by department_id.
  $departments = graduation_planner_department_load_multiple(array_keys($department_ids));

  // Create an array to hold our rows.
  $rows = array();

  foreach ($departments as $department) {

    // Create a row with a link to the departments we are a member of.
    $rows[] = array(
      'data' => array(
        'department' => l(graduation_planner_department_title($department), 'department/' . $department->department_id),
      ),
    );
  }

  // Create a renderable array to theme as table.
  $content['table'] = array(
    '#theme' => 'table',
    '#header' => array(t('Department name')),
    '#rows' => $rows,
    '#empty' => t('You are not a member of any departments'),
  );

  // Return the renderable array.
  return $content;
}

/**
 * Get a list of the staff members of this department.
 *
 * @param object $department
 *   The department object to key off of.
 * @param string $search_term
 *   Any search term which is needed.
 *
 * @return array
 *   Return an array of staff members and their roles in the department.
 */
function _graduation_planner_department_user_get_staff($department, $search_term = NULL) {
  // Returns a new SelectQuery object for the active database.
  $query = db_select('graduation_planner_department_member', 'gpdm');
  // Left Outer Join against the users table in the database.
  $query->leftJoin('users', 'u', 'gpdm.uid = u.uid');
  // Pulls the selected fields out of gpdm.
  $query->fields('gpdm', array(
    'uid',
    'staff',
    'advisor',
    'faculty',
    'administrator'));
  // Checks the gpdm.department_id against department_id.
  $query->condition('gpdm.department_id', $department->department_id);
  // Checks if the user of department is staff admin advisor or faculty.
  $or = db_or();
  $or->condition('gpdm.staff', 1);
  $or->condition('gpdm.administrator', 1);
  $or->condition('gpdm.advisor', 1);
  $or->condition('gpdm.faculty', 1);
  $query->condition($or);
  $result = $query->execute();
  $user_data = $result->fetchAllAssoc('uid');
  $users = user_load_multiple(array_keys($user_data));
  $rows = array();
  // Gets the tupals from user_data and places them in the respective fields.
  foreach ($users as $user) {
    $rows[$user->uid] = array(
      'user' => format_username($user),
      'advisor' => $user_data[$user->uid]->advisor,
      'administrator' => $user_data[$user->uid]->administrator,
      'faculty' => $user_data[$user->uid]->faculty,
      'staff' => $user_data[$user->uid]->staff,
    );
  }
  return $rows;
}

function graduation_planner_department_users_get_staff_form_validate($form, &$form_state) {
  if (!isset($form_state['input']['add_user']['name']) || $form_state['input']['add_user']['name'] = '') {
    form_set_error('add_user', t('To add a user, the name field must contain a name.'));
  }
  else {

    if (module_exists('realname')) {
      $uid = reset(realname_load_user($form_state['values']['add_user']['name']));
    }
    else {
      $account = user_load_by_name($form_state['values']['add_user']['name']);
      $uid = $account->uid;
    }
    if (!isset($uid)) {
      form_set_error('add_user', t('User not found.'));
    }
  }
}

/**
 * Form to display the department staff, with administration functions.
 *
 * @param array $form
 *   Form array, generated by the form builder functions.
 * @param array $form_state
 *   Current form_state, passed by reference.
 * @param object $department
 *   The GraduationPlannerDepartment to work with.
 *
 * @return array
 *   Returns the form array.
 */
function graduation_planner_department_users_get_staff_form($form, &$form_state, $department) {

  if (isset($form_state['triggering_element'])) {
    $array_parents = $form_state['triggering_element']['#array_parents'];
    if ($array_parents[0] == 'users') {
      $uid = $array_parents[1];
      $new_value = $form_state['values']['users'][$uid];
      graduation_planner_department_users_update_db($department, $uid, $new_value);
    }
    elseif ($array_parents[0] == 'add_user') {
      if (module_exists('realname')) {
        $uid = reset(realname_load_user($form_state['values']['add_user']['name']));
      }
      else {
        $account = user_load_by_name($form_state['values']['add_user']['name']);
        $uid = $account->uid;
      }
      graduation_planner_department_users_update_db($department, $uid, array('staff' => 1));
    }
  }
  // Retrieve the staff that belong to this department.

  $users = _graduation_planner_department_user_get_staff($department);

  $form['#id'] = 'graduation-planner-department-users-get-staff-form';

  $form['add_user'] = array(
    '#type' => 'fieldset',
    '#title' => t('Import user to department staff.'),
    '#tree' => TRUE,
  );

  $form['add_user']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#autocomplete_path' => 'graduation_planner/user/autocomplete',
  );
  $form['add_user']['add'] = array(
    '#type' => 'submit',
    '#value' => t('Add user'),
  );




  // Gives the form a tree hierarchy structure.

  $form['users'] = array(
    '#tree' => TRUE,
  );

  // Iterate over the users array...
  foreach ($users as $user_id => $user) {

    // Generate form elements.
    $form['users'][$user_id] = array(
      '#tree' => TRUE,
      '#prefix' => '<div id="user-' . $user_id . '">',
      '#suffix' => '</div>',
    );
    $form['users'][$user_id]['user'] = array(
      '#type' => 'item',
      '#markup' => $user['user'],
    );
    $form['users'][$user_id]['advisor'] = array(
      '#type' => 'checkbox',
      '#default_value' => $user['advisor'],
      '#ajax' => array(
        'wrapper' => 'graduation-planner-department-users-get-staff-form',
        'callback' => 'graduation_planner_department_users_get_staff_form_submit',
        'method' => 'replace',
        'effect' => 'none',
        'progress' => array(
          'type' => NULL,
        ),
      ),
    );
    $form['users'][$user_id]['faculty'] = array(
      '#type' => 'checkbox',
      '#default_value' => $user['faculty'],
      '#ajax' => array(
        'wrapper' => 'graduation-planner-department-users-get-staff-form',
        'callback' => 'graduation_planner_department_users_get_staff_form_submit',
        'method' => 'replace',
        'effect' => 'none',
        'progress' => array(
          'type' => NULL,
        ),
      ),
    );
    $form['users'][$user_id]['staff'] = array(
      '#type' => 'checkbox',
      '#default_value' => $user['staff'],
      '#ajax' => array(
        'wrapper' => 'graduation-planner-department-users-get-staff-form',
        'callback' => 'graduation_planner_department_users_get_staff_form_submit',
        'method' => 'replace',
        'effect' => 'none',
        'progress' => array(
          'type' => NULL,
        ),
      ),
    );
    $form['users'][$user_id]['administrator'] = array(
      '#type' => 'checkbox',
      '#default_value' => $user['administrator'],
      '#ajax' => array(
        'wrapper' => 'graduation-planner-department-users-get-staff-form',
        'callback' => 'graduation_planner_department_users_get_staff_form_submit',
        'method' => 'replace',
        'effect' => 'none',
        'progress' => array(
          'type' => NULL,
        ),
      ),
    );
  }

  // Return the form array.
  return $form;
}

/**
 * Staff Form submission function.
 *
 * @param array $form
 *   Form array, generated by the form builder functions.
 * @param array $form_state
 *   Current form_state, passed by reference.
 */
function graduation_planner_department_users_get_staff_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  return $form;
}

/**
 * Theme the Staff Form for display, as a table.
 *
 * @param array $variables
 *   Variables to be passed into the theming function.
 *
 * @return string
 *   Returns a content string.
 */
function theme_graduation_planner_department_users_get_staff_form($variables) {
  $form = $variables['form'];
  $rows = array();

  // Adds headers for the table.

  $header = array(
    t('Name'),
    t('Staff'),
    t('Faculty'),
    t('Advisor'),
    t('Administrator'),
  );

  // Iterate over the users array.
  foreach (element_children($form['users']) as $user_id) {

    // Create a row for the table with data from the form.
    $rows[] = array(
      'data' => array(
        'user' => drupal_render($form['users'][$user_id]['user']),
        'staff' => drupal_render($form['users'][$user_id]['staff']),
        'faculty' => drupal_render($form['users'][$user_id]['faculty']),
        'advisor' => drupal_render($form['users'][$user_id]['advisor']),
        'administrator' => drupal_render($form['users'][$user_id]['administrator']),
      ),
      
    );
  }

  // Render any remaining elements.

  $output = drupal_render_children($form);

  // Return a content string.
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No Staff'),
    'attributes' => array('id' => 'user-list'),
  ));
  $output .= theme('pager');

  // Return the output string.
  return $output;
}

/**
 * Retrieve a list of students in the department.
 *
 * @param object $department
 *   The GraduationPlannerDepartment object to work with.
 *
 * @return array
 *   Returns a renderable content array.
 */
function graduation_planner_department_user_get_students($department) {

  // Create a query on the users table, extending it with PagerDefault.
  $query = db_select('graduation_planner_department_member', 'gpdm')->extend('PagerDefault');

  $query->leftJoin('users', 'u', 'gpdm.uid = u.uid');
  // Pulls the selected fields out of gpdm.
  $query->fields('gpdm', array(
    'uid',
    'student',
    'advisor_uid'
      )
  );
  $query->condition('gpdm.student', 1);
  // Checks the gpdm.department_id against department_id.
  $query->condition('gpdm.department_id', $department->department_id);

  // Returns a list of user objects keyed by uids.
  $results = $query->execute();
  $uids = $results->fetchAllAssoc('uid');
  $users = user_load_multiple(array_keys($uids));

  // Create an array of rows.
  $rows = array();

  // Iterate over the users array...
  foreach ($users as $user) {

    // Load any plan that belongs to the user.
    $plans = graduation_planner_plan_load_by_user($user);

    // If the user has a plan, display 'View' and 'Delete'.
    if ((count($plans) > 0)) {
      $plan = reset($plans);

      $edit = ' ' . graduation_planner_plan_access('edit plan', $plan) ? l(t('View'), 'plan/' . $plan->plan_id, array('attributes' => array('class' => array('button')))) : 'Yes';
      $edit .= ' ' . graduation_planner_plan_access('edit plan', $plan) ? l(t('Delete'), 'plan/' . $plan->plan_id . '/delete', array('attributes' => array('class' => array('button')))) : '';
    }

    // Otherwise...
    else {

      $edit = ' ' . user_access('create plan') ? l(t('Create'), 'user/' . $user->uid . '/plan/new', array('attributes' => array('class' => array('button')))) : 'No';
    }

    if (isset($uids[$user->uid]->advisor_uid)) {
      $advisor_account = user_load($uids[$user->uid]->advisor_uid);
      $advisor = format_username($advisor_account);
    }
    else {
      $advisor = 'None';
    }

    // Add the data to the row.
    $rows[] = array(
      'data' => array(
        'name' => format_username($user),
        'email' => $user->mail,
        'advisor' => $advisor,
        'plan' => $edit,
      ),
    );
  }

  $content = array();

  // Add the table to the content array.
  $content['user_list'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#empty' => t('No students'),
    '#header' => array(t('Name'), t('Email'), t('Advisor'), t('Plan')),
  );

  // Add a pager to the content array.

  $content['pager'] = array(
    '#theme' => 'pager',
  );

  // Return the renderable array.

  return $content;
}

/**
 * Update the membership table.
 *
 * @param object $department
 *   The GraduationPlannerDepartment object to work on.
 * @param int $uid
 *   The user id of the user being manipulated.
 * @param array $variables
 *   The changes that need to be made to the table.
 */
function graduation_planner_department_users_update_db($department, $uid, $variables) {

  db_merge('graduation_planner_department_member')
      ->key(array(
        'department_id' => $department->department_id,
        'uid' => $uid)
      )
      ->fields(
          array(
            'department_id' => $department->department_id,
            'uid' => $uid,
            'approved' => isset($variables['approved']) ? $variables['approved'] : 0,
            'student' => isset($variables['student']) ? $variables['student'] : 0,
            'advisor' => isset($variables['advisor']) ? $variables['advisor'] : 0,
            'faculty' => isset($variables['faculty']) ? $variables['faculty'] : 0,
            'staff' => isset($variables['staff']) ? $variables['staff'] : 0,
            'administrator' => isset($variables['administrator']) ? $variables['administrator'] : 0,
          )
      )
      ->execute();
}

function graduation_planner_department_user_roles($department, $user) {
  $default_roles = array(
    'advisor' => 0,
    'student' => 0,
    'faculty' => 0,
    'staff' => 0,
    'administrator' => 0
  );
  $roles = &drupal_static(__FUNCTION__);
  if (!isset($roles[$user->uid])) {
    $query = db_select('graduation_planner_department_member', 'gpdm');
    $query->fields('gpdm', array('uid', 'department_id', 'student', 'advisor', 'faculty', 'staff', 'administrator'));
    $query->condition('gpdm.uid', $user->uid);
    $result = $query->execute();
    $role_data = $result->fetchAllAssoc('department_id', PDO::FETCH_ASSOC);
    //print_r($role_data);
    foreach ($role_data as $department_id => $value) {
      $roles[$user->uid][$department_id] = array_merge($default_roles, $value);
    }
  }
  return $roles[$user->uid][$department->department_id];
}

function graduation_planner_department_has_role($department, $user, $has_roles) {
  $roles = graduation_planner_department_user_roles($department, $user);
  //print_r($roles);
  if (isset($roles)) {
    if (is_array($has_roles)) {
      foreach ($has_roles as $role_id) {
        if(isset($roles[$role_id]) && $roles[$role_id] == 1 )
        {
          return TRUE;
        }
        
      }
      return FALSE;
    }
    else {
      return isset($roles[$has_roles]) ? $roles[$has_roles] : false;
    }
  }
  return false;
}

function graduation_planner_department_is_member($department, $user) {
  $members = &drupal_static(__FUNCTION__);
  if (!isset($members[$department->department_id][$user->user_id])) {
    $query = db_select('graduation_planner_department_member', 'gpdm');
    $query->fields('gpdm', array('uid', 'student', 'advisor', 'faculty', 'staff', 'administrator'));
    $query->condition('gpdm.uid', $user->uid);
    $query->condition('gpdm.department_id', $department->department_id);
    $result = $query->execute();
    $department_ids = $result->fetchAllAssoc('department_id');
    $members[$department->department_id][$user->user_id] = !empty($department_ids);
  }
  return $members[$department->department_id][$user->user_id];
}

function graduation_planner_department_assign_advisor($department, $user) {
  $query = db_select('graduation_planner_department_member', 'gpdm');
  $query->fields('gpdm', array('uid', 'advisor_uid'));
  $query->condition('gpdm.uid', $user->uid);
  $query->condition('gpdm.department_id', $department->department_id);
  $result = $query->execute();
  $uids = $result->fetchAllAssoc('uid');
  if (!isset($uids[$user->uid]->advisor_uid)) {
    $query = db_select('graduation_planner_department_member', 'gpdm');
    $query->fields('gpdm', array('uid', 'advisor_uid'));
    $query->condition('gpdm.uid', $user->uid);
    $query->condition('gpdm.department_id', $department->department_id);
    $result = $query->execute();
    $uids = $result->fetchAllAssoc('uid');
  }
}
