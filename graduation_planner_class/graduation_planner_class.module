<?php

/**
 * @file
 * Graduation Planner Class module file.
 */

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'graduation_planner_class') . "/graduation_planner_class.field.inc";

/**
 * Get the full title of the class.
 *
 * @param object $class
 *   The class object.
 *
 * @return string
 *   Returns a string representing the title of the class.
 */
function graduation_planner_class_title($class) {

  // Load the department this class belongs to.
  $department = graduation_planner_department_load($class->class_department);

  // If the department is an object and has a short name...
  if (is_object($department) && isset($department->short_name)) {

    // Return the complete title.
    return $department->short_name . ' ' . $class->class_number . ': ' . $class->title;
  }

  // Otherwise, return the placeholder title for unknown department.
  return 'UNKNOWN ' . $class->class_number . ': ' . $class->title;
}

/**
 * Implements hook_menu().
 */
function graduation_planner_class_menu() {
  $menu = array();
  $menu['admin/structure/graduation_planner_class/manage'] = array(
    'title' => 'Graduation Planner - Class Admin',
    'description' => 'Administrative control panel for Class entity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_class_admin_form'),
    'access arguments' => array('administer graduation_planner_class entities'),
    'file' => 'graduation_planner_class.admin.inc',
  );
  $menu['class'] = array(
    'title' => 'Classes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_class_list_form'),
    'access callback' => 'graduation_planner_class_access',
    'access arguments' => array('list classes'),
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['class/list'] = array(
    'title' => 'Class list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_class_list_form'),
    'access callback' => 'graduation_planner_class_access',
    'access arguments' => array('list classes'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $menu['class/new'] = array(
    'title' => 'Create new class',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_class_form'),
    'access callback' => 'graduation_planner_class_access',
    'access arguments' => array('create class'),
    'type' => MENU_LOCAL_TASK,
  );
  $menu['class/%graduation_planner_class'] = array(
    'title' => 'Class',
    'title callback' => 'graduation_planner_class_title',
    'title arguments' => array(1),
    'page callback' => 'graduation_planner_class_view',
    'page arguments' => array(1),
    'access callback' => 'graduation_planner_class_access',
    'access arguments' => array('view class'),
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['class/%graduation_planner_class/view'] = array(
    'title' => 'Class',
    'title callback' => 'graduation_planner_class_title',
    'title arguments' => array(1),
    'page callback' => 'graduation_planner_class_view',
    'access callback' => 'graduation_planner_class_access',
    'access arguments' => array('view class'),
    'page arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $menu['class/%graduation_planner_class/delete'] = array(
    'title' => 'Delete class',
    'page callback' => 'drupal_get_form',
    'access callback' => 'graduation_planner_class_access',
    'access arguments' => array('delete own class', 1),
    'page arguments' => array('graduation_planner_class_delete_form', 1),
    'type' => MENU_LOCAL_TASK,
  );
  $menu['class/%graduation_planner_class/edit'] = array(
    'title' => 'Edit class',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_class_form', 1),
    'access callback' => 'graduation_planner_class_access',
    'access arguments' => array('edit own class', 1),
    'type' => MENU_LOCAL_TASK,
  );

  return $menu;
}

/**
 * Delete confirmation form.
 *
 * @param array $form
 *   The form array generated by the form builder functions.
 * @param array $form_state
 *   Current form_state, passed by reference.
 * @param object $class
 *   GraduationPlannerClass object.
 *
 * @return array
 *   Returns the form array.
 */
function graduation_planner_class_delete_form(array $form, array &$form_state, $class) {
  $form['class_id'] = array(
    '#type' => 'hidden',
    '#value' => $class->class_id,
  );
  $form['warning'] = array(
    '#markup' => t('Do you really wish to delete the class @class', array('@class' => graduation_planner_class_title($class))),
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );
  return $form;
}

/**
 * Delete confirmation form submit function.
 *
 * @param array $form
 *   Form array generated by the form builder functions.
 * @param array $form_state
 *   Current form_state, passed by reference.
 */
function graduation_planner_class_delete_form_submit(array $form, array &$form_state) {

  entity_delete('graduation_planner_class', $form_state['values']['class_id']);
  $form_state['redirect'] = 'class';
}

/**
 * Recursively assemble class requirements.
 *
 * @param object $class
 *   The GraduationPlannerClass object.
 *
 * @return array
 *   Return an array of requirements.
 */
function graduation_planner_class_get_requirement_chain($class) {
  $requirements = array();

  // Get the prerequisites for this class.
  $temp_requirements = graduation_planner_class_get_requirements($class);

  // If there are prerequisites.
  if (isset($temp_requirements)) {

    // Iterate over the prerequisites.
    foreach ($temp_requirements as $requirement) {
      $requirements[$requirement['course_id']] = 1;
      $temp_class = graduation_planner_class_load($requirement['course_id']);

      // Recurse.
      $requirements += graduation_planner_class_get_requirement_chain($temp_class);
    }
  }
  return $requirements;
}

/**
 * Get the prerequisites of this class.
 *
 * @param object $class
 *   The GraduationPlannerClass object.
 *
 * @return array
 *   Return an array of course requirements.
 */
function graduation_planner_class_get_requirements($class) {
  if (isset($class->field_course_requirement[LANGUAGE_NONE])) {
    return $class->field_course_requirement[LANGUAGE_NONE];
  }
  return array();
}

/**
 * Get a paginated list of classes in table format.
 *
 * @param object $department
 *   (Optional) GraduationPlannerDepartment object.
 * @param string $search_term
 *   (Optional) search term to filter on.
 * @param array $quarters_available
 *   (Optional) list of quarters.
 *
 * @return array
 *   Returns a renderable array.
 */
function graduation_planner_class_get_classes($department = NULL, $search_term = NULL, array $quarters_available = array()) {
  $content = array();
  $query = db_select('graduation_planner_class', 'gpc')->extend('PagerDefault');
  $query->leftJoin('graduation_planner_department', 'gpd', 'gpd.department_id = gpc.class_department');
  $query->fields('gpc', array('class_id'));
  $quarters = graduation_planner_terms();
  if ($quarters_available > -1) {
    $query->leftJoin('field_data_field_quarters_available', 'fqa', 'fqa.entity_id=gpc.class_id');
    $query->condition('fqa.field_quarters_available_' . $quarters[$quarters_available]['machine_name'] . '_quarter', 1);
  }

  if (isset($department) && $department > -1) {
    $query->condition('gpc.class_department', $department, '=');
  }
  if (isset($search_term)) {
    $or = db_or();
    $or->where('gpc.title LIKE \'%' . $search_term . '%\'');
    $or->where('gpc.class_number LIKE \'%' . $search_term . '%\'');
    $or->where("concat(gpd.short_name,gpc.class_number)LIKE '%$search_term%'");
    $or->where("concat(gpd.short_name,' ',gpc.class_number)LIKE '%$search_term%'");
    $query->condition($or);
  }
  $result = $query->execute();
  $class_ids = $result->fetchAllAssoc('class_id');
  $classes = graduation_planner_class_load_multiple(array_keys($class_ids));
  $rows = array();
  foreach ($classes as $class) {
    $uri = $class->uri();
    $rows[] = array(
      'data' => array(
        'class_name' => l(graduation_planner_class_title($class), $uri['path']),
        'class_description' => $class->description,
      ),
    );
  }
  /* $content['create_class'] = array(
    '#theme' => 'link',
    '#text' => t('New class'),
    '#path' => 'class/new',
    '#weight' => -100,
    '#options' => array(
    'attributes' => array('class' => array('button'), 'id' => 'new-class'),
    'html' => FALSE,
    ),
    '#access' => graduation_planner_class_access('create class'),
    ); */
  $content['class_list'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#empty' => t('No classes'),
    '#header' => array(t('Course name'), t('Course description')),
  );
  $content['pager'] = array(
    '#theme' => 'pager',
  );
  return $content;
}

/**
 * Form to list classes.
 *
 * @param array $form
 *   Initail form array generated by form builder functions.
 * @param array $form_state
 *   Current form_state, passed by reference.
 *
 * @return array
 *   Returns the form array.
 */
function graduation_planner_class_list_form(array $form, array &$form_state) {

  $form['filters'] = array(
    '#tree' => TRUE,
    '#prefix' => '<div class="graduation_planner_class_list_form">',
    '#suffix' => '</div>',
  );
  $form['filters']['department'] = array(
    '#type' => 'select',
    '#title' => t('Department'),
    '#description' => t('Optionally choose a department when searching.'),
    '#empty_option' => t('All departments'),
    '#empty_value' => -1,
    '#default_value' => isset($form_state['values']['filters']['department']) ? $form_state['values']['filters']['department'] : '',
    '#options' => graduation_planner_department_get_departments(),
  );
  $quarters_available = isset($form_state['values']['filters']['quarters_available']) ? $form_state['values']['filters']['quarters_available'] : -1;
  $form['filters']['quarters_available'] = array(
    '#type' => 'select',
    '#title' => t('Quarters available'),
    '#description' => t('Optionally choose a quarter the class is taught.'),
    '#options' => array(
      0 => t('Fall'),
      1 => t('Winter'),
      2 => t('Spring'),
      3 => t('Summer'),
    ),
    '#empty_option' => t('All'),
    '#empty_value' => -1,
  );

  $form['filters']['search_term'] = array(
    '#title' => t('Search term'),
    '#description' => t('for example, Math 172'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['values']['filters']['search_term']) ? $form_state['values']['filters']['search_term'] : '',
  );
  $form['filters']['search'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $search_term = isset($form_state['values']['filters']['search_term']) ? $form_state['values']['filters']['search_term'] : NULL;
  $department = isset($form_state['values']['filters']['department']) ? $form_state['values']['filters']['department'] : NULL;
  $classes = graduation_planner_class_get_classes($department, $search_term, $quarters_available);
  $form['results'] = array(
    '#markup' => drupal_render($classes),
  );
  return $form;
}

/**
 * View the GraduationPlannerClass entity.
 *
 * @param object $class
 *   The GraduationPlannerClass object.
 * @param string $view_mode
 *   The view mode to display.
 *
 * @return array
 *   Return a renderable array.
 */
function graduation_planner_class_view($class, $view_mode = 'full') {

  $class->content = array();

  // Build the initial content of the class.
  $class->content = entity_get_controller($class->type)->buildContent($class, $view_mode);
  $class->content += field_attach_view('graduation_planner_class', $class, $view_mode);

  $class->content += array(
    '#theme' => 'graduation_planner_class__' . $view_mode,
    '#content' => $class->content,
    '#view_mode' => $view_mode,
    '#language' => NULL,
  );

  // Return a renderable array.
  return $class->content;
}

/**
 * Implements hook_field_extra_fields().
 */
function graduation_planner_class_field_extra_fields() {
  $extra = array();
  $extra['graduation_planner_class']['graduation_planner_class'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('Title'),
        'weight' => -4,
      ),
      'description' => array(
        'label' => t('Description'),
        'description' => t('Description'),
        'weight' => -3,
      ),
      'class_department' => array(
        'label' => t('Course department'),
        'description' => t('Course department'),
        'weight' => -6,
      ),
      'class_number' => array(
        'label' => t('Course number'),
        'description' => t('Course number'),
        'weight' => -5,
      ),
      'class_units' => array(
        'label' => t('Course units'),
        'description' => t('Course units'),
        'weight' => -2,
      ),
      'class_required' => array(
        'label' => t('Course required'),
        'description' => t('Course required'),
        'weight' => -1,
      ),
      'class_is_gen_ed' => array(
        'label' => t('Course is Gen Ed'),
        'description' => t('Course is a general educational requirement'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('Title'),
        'weight' => 0,
      ),
      'description' => array(
        'label' => t('Description'),
        'description' => t('Description'),
        'weight' => 0,
      ),
      'class_department' => array(
        'label' => t('Course department'),
        'description' => t('Course department'),
        'weight' => -6,
      ),
      'class_number' => array(
        'label' => t('Course number'),
        'description' => t('Course number'),
        'weight' => -5,
      ),
      'class_units' => array(
        'label' => t('Course units'),
        'description' => t('Course units'),
        'weight' => -2,
      ),
      'class_required' => array(
        'label' => t('Course required'),
        'description' => t('Course required'),
        'weight' => -1,
      ),
      'class_is_gen_ed' => array(
        'label' => t('Course is Gen Ed'),
        'description' => t('Course is a general educational requirement'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_theme().
 */
function graduation_planner_class_theme($existing, $type, $theme, $path) {
  return array(
    'graduation_planner_class__full' => array(
      'template' => 'graduation-planner-class--full',
      'variables' => array('content' => NULL),
      'path' => drupal_get_path('module', 'graduation_planner_class') . '/templates',
    ),
    'graduation_planner_class__list' => array(
      'template' => 'graduation-planner-class--list',
      'variables' => array('content' => NULL),
      'path' => drupal_get_path('module', 'graduation_planner_class') . '/templates',
    ),
  );
}

/**
 * Class List Form submit function.
 *
 * @param array $form
 *   The form array generated by the form builder functions.
 * @param array $form_state
 *   The current form_state, passed by reference.
 */
function graduation_planner_class_list_form_submit(array $form, array &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_permission().
 */
function graduation_planner_class_permission() {
  return array(
    'create class' => array(
      'title' => t('Create a graduation planner class'),
      'description' => t('Allows the user to create classes for graduation planner'),
    ),
    'edit any class' => array(
      'title' => t('Edit any graduation planner class'),
      'description' => t('Allows the user to edit any graduation planner class'),
    ),
    'edit own class' => array(
      'title' => t('Edit own graduation planner class'),
      'description' => t('Allows the user to edit own graduation planner class'),
    ),
    'delete any class' => array(
      'title' => t('Delete any graduation planner class'),
      'description' => t('Allows the user to delete any graduation planner class'),
    ),
    'delete own class' => array(
      'title' => t('Delete own graduation planner class'),
      'description' => t('Allows the user to delete own graduation planner class'),
    ),
    'list classes' => array(
      'title' => t('List all classes'),
      'description' => t('Allows the user to see a list of classes'),
    ),
    'view class' => array(
      'title' => t('View class'),
      'description' => t('Allows the user to view any class'),
    ),
  );
}

/**
 * Access callback for graduation_planner_class.module.
 *
 * @param string $permission
 *   The permission string to test.
 * @param object $class
 *   The GraduationPlannerClass object.
 *
 * @return bool
 *   Returns TRUE if access is granted, FALSE otherwise.
 */
function graduation_planner_class_access($permission, $class = NULL) {
  $access = FALSE;
  switch ($permission) {
    case 'delete own class':
      // Load the department the class belongs to.
      $department = graduation_planner_department_load($class->class_department);

      /*
       * True if the user can delete any class, or can delete any classes
       * owned by a department they have control over.
       */
      $access = (graduation_planner_class_access("delete any class", $class) || (user_access("delete own class") && graduation_planner_department_access("edit own department", $department)));
      break;

    case 'delete any class':

      // True if the user has the permission 'delete any class'.
      $access = user_access('delete any class');
      break;

    case 'edit own class':

      // Load the department the class belongs to.
      $department = graduation_planner_department_load($class->class_department);

      /*
       * True if the user can edit any class, or can edit any classes
       * owned by a department they have control over.
       */

      $access = (graduation_planner_class_access("edit any class", $class) || (user_access("edit own class") && graduation_planner_department_access("edit own department", $department)));
      break;

    case 'create class':

      // True if the user can create classes.
      $access = user_access('create class');
      break;

    case 'edit any class':

      // True if the user can edit any class.
      $access = user_access('edit any class');
      break;

    case 'view class':

      // True if the user can view any class.
      $access = user_access('view class');
      break;

    case 'list classes':

      // True if the user can list classes.
      $access = user_access('list classes');
      break;
  }

  return $access;
}

/**
 * Load a GraduationPlannerClass from the database.
 *
 * @param int $class_id
 *   The class_id of the GraduationPlannerClass object to be retrieved.
 * @param bool $reset
 *   True to reset the internal cache, FALSE otherwise.
 *
 * @return object
 *   Return a GraduationPlannerClass object if found, FALSE otherwise.
 */
function graduation_planner_class_load($class_id, $reset = FALSE) {
  $class_ids = (isset($class_id) ? array($class_id) : array());
  $class = graduation_planner_class_load_multiple($class_ids, array(), $reset);
  return $class ? reset($class) : FALSE;
}

/**
 * Load multiple GraduationPlannerClass objects by class_ids.
 *
 * @param array $class_ids
 *   An array of class ids to retrieve.
 * @param array $conditions
 *   (Deprecated) Any conditions used to restrict the entities returned.
 * @param bool $reset
 *   True to reset the internal cache, FALSE otherwise.
 *
 * @return array
 *   Returns an array of GraduationPlannerClass objects.
 */
function graduation_planner_class_load_multiple(array $class_ids = array(), array $conditions = array(), $reset = FALSE) {
  return entity_load('graduation_planner_class', $class_ids, $conditions, $reset);
}

/**
 * Create or Edit a GraduationPlannerClass entity.
 *
 * @param array $form
 *   The form array, generated by the form builder functions.
 * @param array $form_state
 *   The current form_state, passed by reference.
 * @param object $class
 *   (Optional) The GraduationPlannerClass object to edit.
 *
 * @return array
 *   Return the form array.
 */
function graduation_planner_class_form(array $form, array &$form_state, $class = NULL) {

  // If the class exists...
  if (isset($class)) {

    // Create a hidden form element for retrieval in validate and submit.
    $form['class_id'] = array(
      '#type' => 'hidden',
      '#value' => $class->class_id,
    );
  }
  // Otherwise...
  else {

    // Create a GraduationPlannerClass entity stub for field_attach.
    $class = entity_get_controller('graduation_planner_class')->create();
  }

  // Create a form element for the department.
  $form['class_department'] = array(
    '#title' => t('Course department'),
    '#description' => t('Choose a department this class will belong to.'),
    '#type' => 'select',
    '#options' => graduation_planner_department_get_departments(),
    '#empty_option' => t('- Select -'),
    '#empty_value' => -1,
    '#default_value' => isset($class->class_department) ? $class->class_department : -1,
  );

  // Create a form element for the course number.
  $form['class_number'] = array(
    '#type' => 'textfield',
    '#length' => 10,
    '#title' => t('Course number'),
    '#description' => t('Course numbers are generally numeric, but not necessarily.  For example: 154, 100C'),
    '#default_value' => isset($class->class_number) ? $class->class_number : '',
    '#required' => TRUE,
  );

  // Create a form element for the course name.
  $form['title'] = array(
    '#type' => 'textfield',
    '#length' => 50,
    '#title' => t('Course name'),
    '#description' => t('The name of the course.  e.g., Social Informatics.'),
    '#default_value' => isset($class->title) ? $class->title : '',
    '#required' => TRUE,
  );

  // Create a form element for the course description.
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Course description'),
    '#description' => t('Detailed description of the course.'),
    '#default_value' => isset($class->description) ? $class->description : '',
    '#required' => TRUE,
  );

  // Form element for the number of units.
  $form['class_units'] = array(
    '#type' => 'textfield',
    '#title' => t('Course units'),
    '#description' => t('The number of credit hours this course is worth.'),
    '#default_value' => isset($class->class_units) ? $class->class_units : '',
    '#required' => TRUE,
  );

  // Create a course is required checkbox.
  $form['class_required'] = array(
    '#type' => 'select',
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
      2 => t('Placeholder (Can be placed anywhere)'),
    ),
    '#default_value' => isset($class->class_required) ? $class->class_required : 0,
    '#title' => t('Course is required.'),
  );

  // Create a checkbox for marking a course general educational.
  $form['class_is_gen_ed'] = array(
    '#type' => 'checkbox',
    '#default_value' => isset($class->class_is_gen_ed) ? $class->class_is_gen_ed : 0,
    '#title' => t('This course is a general educational course.'),
  );

  // Create a select for the required academic standing to take this class.
  $form['class_standing'] = array(
    '#type' => 'select',
    '#default_value' => isset($class->class_standing) ? $class->class_standing : 0,
    '#title' => t('Required class standing.'),
    '#options' => graduation_planner_class_standings(),
  );

  // Attach fields.
  field_attach_form('graduation_planner_class', $class, $form, $form_state);

  // Create a submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($class->class_id) ? t('Save class') : t('Create class'),
    '#weight' => 100,
  );

  // Return form array.
  return $form;
}

/**
 * Class Create/Edit Form submission function.
 *
 * @param array $form
 *   The form generated by the form builder functions.
 * @param array $form_state
 *   The current form_state, passed by reference.
 *
 * @return array
 *   Returns the form array.
 */
function graduation_planner_class_form_submit(array $form, array &$form_state) {

  // If the class_id is passed as a value in form_state...
  if (isset($form_state['values']['class_id'])) {

    // Load the class from the database.
    $class = graduation_planner_class_load($form_state['values']['class_id']);

    // Iterate over the values in form_state.
    foreach ($form_state['values'] as $property => $value) {

      // Assign the value to the property in the entity.
      $class->{$property} = $value;
    }
  }
  // Otherwise...
  else {

    // Create a Class object stub for field_attach_submit.
    $class = entity_get_controller('graduation_planner_class')->create($form_state['values']);
  }

  // Run the submission functions on any fields.
  field_attach_submit('graduation_planner_class', $class, $form, $form_state);

  // Save the entity.
  entity_save('graduation_planner_class', $class);

  // Return a message to the user.
  drupal_set_message(t('You have successfully @action the class @class_name', array('@action' => 'Saved', '@class_name' => graduation_planner_class_title($class))));
  $redirect_path = $class->uri();

  // Redirect to the entity.
  $form_state['redirect'] = $redirect_path['path'];
  return $form;
}

/**
 * GraduationPlannerClass entity.
 */
class GraduationPlannerClass extends Entity {

  /**
   * Returns the title.
   *
   * @return string
   *   Returns the title of the GraduationPlannerClass entity.
   */
  protected function defaultLabel() {
    return $this->title;
  }

  /**
   * The defaultUri.
   *
   * @return array
   *   Return an array containing the default path to this entity.
   */
  protected function defaultUri() {
    return array('path' => 'class/' . $this->identifier());
  }

}

/**
 * The GraduationPlannerClassController EntityApiController.
 */
class GraduationPlannerClassController extends EntityAPIController {

  /**
   * Create a new GraduationPlannerClass entity.
   *
   * @param array $values
   *   Passed in values for the entity constructor.
   *
   * @return object
   *   Returns a constructed GraduationPlannerClass entity.
   */
  public function create(array $values = array()) {

    $values += array(
      'title' => '',
      'description' => '',
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      'type' => 'graduation_planner_class',
    );
    return parent::create($values);
  }

  /**
   * Builds a content array for a GraduationPlannerClass entity.
   *
   * @param object $entity
   *   The GraduationPlannerClass entity to be built.
   * @param string $view_mode
   *   The view mode used to display this entity.
   * @param string $langcode
   *   The language code of this entity.
   * @param array $content
   *   Any Passed-in content that needs to be added to.
   *
   * @return array
   *   Returns an array of content.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    // Get the display info set by the entity display UI.
    $display_info = field_extra_fields_get_display('graduation_planner_class', 'graduation_planner_class', $view_mode);

    // Create a field array for the title property.
    $content['title'] = array(
      '#theme' => 'field',
      '#weight' => $display_info['title']['weight'],
      '#title' => t('Course name'),
      '#access' => isset($display_info['title']['visible']) ? $display_info['title']['visible'] : 0,
      '#label_display' => 'hidden',
      '#view_mode' => $view_mode,
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_title',
      '#field_type' => 'text',
      '#entity_type' => 'graduation_planner_class',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => graduation_planner_class_title($entity))),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain(graduation_planner_class_title($entity))),
    );

    // Create a field array for the description propery.
    $content['description'] = array(
      '#theme' => 'field',
      '#weight' => $display_info['description']['weight'],
      '#title' => t('Course description'),
      '#access' => isset($display_info['description']['visible']) ? $display_info['description']['visible'] : 0,
      '#label_display' => 'hidden',
      '#view_mode' => $view_mode,
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_description',
      '#field_type' => 'text',
      '#entity_type' => 'graduation_planner_class',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => $entity->description)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->description)),
    );

    // Create a field array for the class_units property.
    $content['class_units'] = array(
      '#theme' => 'field',
      '#weight' => $display_info['class_units']['weight'],
      '#title' => t('Units'),
      '#access' => isset($display_info['class_units']['visible']) ? $display_info['class_units']['visible'] : 0,
      '#label_display' => 'inline',
      '#view_mode' => $view_mode,
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_class_units',
      '#field_type' => 'text',
      '#entity_type' => 'graduation_planner_class',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => $entity->class_units)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->class_units)),
    );
    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }

}

/**
 * Implements hook_entity_info().
 */
function graduation_planner_class_entity_info() {
  $entities = array();
  $entities['graduation_planner_class'] = array(
    'label' => t('Graduation Planner - Class'),
    'entity class' => 'GraduationPlannerClass',
    'controller class' => 'GraduationPlannerClassController',
    'base table' => 'graduation_planner_class',
    'revision table' => 'graduation_planner_class_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'class_id',
      'bundle' => 'type',
      'revision' => 'revision_id',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'graduation_planner_class' => array(
        'label' => t('Graduation Planner - Class'),
        'admin' => array(
          'path' => 'admin/structure/graduation_planner_class/manage',
          'access arguments' => array('administer graduation_planner_class entities'),
        ),
      ),
    ),
    'load hook' => 'graduation_planner_class_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
      'list' => array(
        'label' => t('List Item'),
        'custom settings' => TRUE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'graduation_planner_class_uri',
    'module' => 'graduation_planner_class',
    'access callback' => 'graduation_planner_class_access',
  );
  return $entities;
}

/**
 * Returns the UI for the GraduationPlannerClass Entity.
 *
 * @param object $class
 *   The GraduationPlannerClass entity.
 *
 * @return array
 *   Returns an array containing the path to the entity.
 */
function graduation_planner_class_uri($class) {
  return array('path' => 'class/' . $class->identifier());
}

/**
 * Retrieves a GraduationPlannerClass object from the database by its title.
 * 
 * @param string $course_title
 *    The title of the object to be retrieved from the database.
 * 
 * @return object
 *    Returns the GraduationPlannerClass object retrieved.
 */
function graduation_planner_class_load_by_title($course_title) {

  $query = db_select('graduation_planner_class', 'gpc')->extend('PagerDefault');
  $query->leftJoin('graduation_planner_department', 'gpd', 'gpd.department_id = gpc.class_department');
  $query->fields('gpc', array('class_id'));
  $or = db_or();
  $or->where('gpc.title LIKE \'%' . $course_title . '%\'');
  $or->where('gpc.class_number LIKE \'%' . $course_title . '%\'');
  $or->where("concat(gpd.short_name,gpc.class_number)LIKE '%$course_title%'");
  $or->where("concat(gpd.short_name,' ',gpc.class_number)LIKE '%$course_title%'");
  $query->condition($or);
  $result = $query->execute();
  $class_ids = $result->fetchAllAssoc('class_id');
  $classes = graduation_planner_class_load_multiple(array_keys($class_ids));
  return reset($classes);
}

/**
 * Implements hook_exporter_definition()
 */
function graduation_planner_class_exporter_definition() {
  $info = entity_get_info('graduation_planner_class');
  return array('graduation_planner_class' => $info);
}

/**
 * Implements hook_importer_definition()
 */
function graduation_planner_class_importer_definition() {
  return array(
    'graduation_planner_class' => array(
      'import callback' => 'graduation_planner_class_import'
    ),
  );
}

/**
 * Imports GraduationPlannerClass entities and their revisions into the database.
 * 
 * @param array $entities
 *    An array of entities to put into the database.
 * @param array $revisions
 *    An array of revisions to put into the database.
 */
function graduation_planner_class_import($entities, $revisions) {
  $query = db_select('graduation_planner_class', 't');
  $query->fields('t', array('class_id'));
  $results = $query->execute();
  $class_ids = $results->fetchAllAssoc('class_id');

  entity_delete_multiple('graduation_planner_class', array_keys($class_ids));
  if (isset($revisions)) {
    foreach ($revisions as $revision) {

      $original = entity_load('graduation_planner_class', array($revision->class_id));

      if (empty($original)) {
        $revision->is_new = TRUE;
        entity_save('graduation_planner_class', $revision);
      }
      else {
        $revision->is_new_revision = TRUE;
        entity_save('graduation_planner_class', $revision);
      }
    }
  }
}
