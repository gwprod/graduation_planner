<?php

/**
 * @file
 * Graduation Planner Class Section Module
 */

/**
 * Validates the permission codes submitted to the class section.
 *
 * @param string $test_string
 *   The string to test for valid permission codes.
 */
function graduation_planner_class_section_validation($test_string) {

  // Trim white space at beginning and at the end.

  $test_string = trim($test_string);

  // Add a new line at the end, for consistency.
  $test_string = $test_string . "\n";

  // If the test string is less than 5 characters long, it is invalid.
  if (strlen($test_string) < 5) {
    return "The input did not contain proper information";
  }

  // Split the string by LF.
  $results = preg_split("^\d{6}$", $test_string);

  // Check to see if preg_split returns values.
  if (!empty($results)) {
    return "invalid";
  }

  $matches = array();
  if (preg_match_all("^\d{6}$", $test_string, $matches)) {

    // Use array_flip to eliminate duplicate entries.

    $matches = array_flip($matches);
    $matches = array_flip($matches);

    return $matches;
  }
  return "error";
}

/**
 * Implements hook_load().
 */
function graduation_planner_class_section_load($section_id, $reset = FALSE) {
  $section_ids = (isset($section_id) ? array($section_id) : array());
  $section = graduation_planner_class_load_multiple($section_ids, array(), $reset);
  return $section ? reset($section) : FALSE;
}

/**
 * Implements hook_load_multiple().
 */
function graduation_planner_class_section_load_multiple($section_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('graduation_planner_class_section', $section_ids, $conditions, $reset);
}

/**
 * Form for creating and editing class sections.
 *
 * @param array $form
 *   Form array generated by the form builder function.
 * @param array $form_state
 *   Current form_state, passed by reference.
 * @param object $class
 *   The class object for sections to be added to.
 * @param object $section
 *   The (optional) section to be edited.
 *
 * @return array
 *   Returns a form array.
 */
function graduation_planner_class_section_form($form, &$form_state, $class, $section = NULL) {

  // Create a hidden form element with the class_id
  $form['class_id'] = array(
    '#type' => 'hidden',
    '#value' => $class->class_id,
  );

  // If the section entity exists, this is an edit form.
  if (isset($section)) {

    // Create a hidden form element for the section.
    $form['section_id'] = array(
      '#type' => 'hidden',
      '#value' => $section->section_id,
    );
  }
  // Otherwise...
  else {

    // Create a GraduationPlannerClassSection entity as a stub, for fields.
    $section = entity_get_controller('graduation_planner_class_section')->create();
  }

  // Create a textfield for class_section.
  // @TODO:  add validation to verify numeric.
  $form['class_section'] = array(
    '#title' => t('Section number'),
    '#type' => 'textfield',
    '#default_value' => isset($section->class_section) ? $section->class_section : 001,
    '#required' => TRUE,
  );

  // Create a select box for the quarters this section is offered.
  $form['quarters'] = array(
    '#type' => 'select',
    '#length' => 10,
    '#title' => t('Quarter offered'),
    '#options' => graduation_planner_quarter_list(),
    '#default_value' => isset($section->quarters) ? $section->quarters : '',
    '#required' => TRUE,
  );

  // Create a textfield for the year.
  // @TODO:  Refactor.
  $form['year'] = array(
    '#type' => 'textfield',
    '#length' => 4,
    '#title' => t('Year'),
    '#default_value' => isset($section->year) ? $section->year : '',
    '#required' => TRUE,
  );

  // Create a textarea for permission codes to be inserted.

  $form['permission_codes'] = array(
    '#type' => 'textarea',
    '#title' => t('Permission codes'),
    '#default_value' => isset($section->permission_codes) ? $section->permission_codes : '',
    '#description' => t('This is where you would submit the permission codes.  The format is one 6 digit permission code per line.'),
  );

  // Attach any fields.
  field_attach_form('graduation_planner_class_section', $class, $form, $form_state);

  // Create a submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($section) ? 'Save class section' : 'Create class section',
    '#weight' => 100,
  );

  // Return the form array.
  return $form;
}

/**
 * Form validation function for editing and creating sections.
 *
 * @param array $form
 *   The form array generated by the form builder functions.
 * @param array $form_state
 *   The current form_state, passed by reference.
 */
function graduation_planner_class_section_form_validate($form, &$form_state) {
  if (isset($form_state['values']['permission_codes']) && $form_state['values']['permission_codes'] != '') {
    $codes = graduation_planner_class_section_validation($form_state['values']['permission_codes']);
    if (!is_array($codes)) {
      form_set_error('permission_codes', t('Permission codes are in an incorrect format.'));
    }
    else {
      $permission_codes = array();
      foreach ($codes as $code) {
        $permission_codes[$code] = array(
          'permission_code' => $code,
          'uid' => 0,
        );
      }

      form_set_value('permission_codes', $permission_codes, $form_state);
    }
  }
}

/**
 * Section create/edit form submit function.
 *
 * @param array $form
 *   Form array generated by the form builder functions.
 * @param array $form_state
 *   Current form_state, passed by reference.
 *
 * @return array
 *   Returns the modified form array.
 */
function graduation_planner_class_section_form_submit($form, &$form_state) {

  // If the section_id is submitted by the form...
  if (isset($form_state['values']['section_id'])) {

    // Load the section from the database.
    $section = graduation_planner_class_section_load($form_state['values']['section_id']);

    // Iterate over the form_state, changing the values of the entity.
    foreach ($form_state['values'] as $property => $value) {
      $section->{$property} = $value;
    }
  }
  else {

    // Otherwise, create a new section based on the values submitted.

    $section = entity_get_controller('graduation_planner_class_section')->create($form_state['values']);
  }

  // If permission codes were submitted, add them into the data property.
  if (isset($form_state['values']['permission_codes'])) {
    $section->data = $form_state['values']['permission_codes'];
  }

  // Save the section to the database.
  entity_save('graduation_planner_class_section', $section);

  // Redirect to the underlying class.
  $form_state['redirect'] = 'class/' . $form_state['values']['class_id'] . '/sections';
  return $form;
}

/**
 * Implements hook_menu().
 */
function graduation_planner_class_section_menu() {
  $menu = array();
  $menu['class/%graduation_planner_class/sections'] = array(
    'title' => 'Sections',
    'page callback' => 'graduation_planner_class_section_list',
    'access callback' => 'graduation_planner_class_access',
    'access arguments' => array('view class', 1),
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $menu['class/%graduation_planner_class/section/new'] = array(
    'title' => 'New section',
    'page callback' => 'drupal_get_form',
    'access callback' => 'graduation_planner_class_access',
    'access arguments' => array('create class'),
    'page arguments' => array('graduation_planner_class_section_form', 1),
    'type' => MENU_NORMAL_ITEM,
  );

  return $menu;
}

/**
 * Retrieve the sections which belong to a class in a given year and quarter.
 *
 * @param int $class_id
 *   The class id of the class.
 * @param int $year
 *   The year this class is being taught.
 * @param int $quarter
 *   The quarter this class is being taught.
 *
 * @return array
 *   Retrieve an array of section options.
 */
function graduation_planner_class_section_retrieve_sections($class_id, $year, $quarter) {

  // Create a database query which will get the sections available.
  $result = db_query('SELECT * FROM {graduation_planner_class_section} WHERE year = :year AND class_id =:class_id AND quarters = :quarter', array(
    'year' => $year,
    'quarter' => $quarter,
    'class_id' => $class_id,
  ));

  // Get a list of section_ids from the resultset.
  $section_ids = $result->fetchAllAssoc('section_id');

  // Load the sections from the section_ids.
  $sections = graduation_planner_class_section_load_multiple(array_keys($section_ids));

  $options = array();

  // Iterate over the sections...
  foreach ($sections as $section) {

    // Create options.
    $options[$section->section_id] = t('Section @section_name', array('@section_name' => $section->class_section));
  }

  // Return the options.
  return $options;
}

/**
 * Alter the class section field widget.
 *
 * @param array $element
 *   The element to be altered.
 * @param array $form_state
 *   The current form_state, passed by reference.
 * @param array $context
 *   The specific context information.
 */
function graduation_planner_class_section_field_widget_plan_courses_widget_form_alter(&$element, &$form_state, $context) {

  $items = $context['items'];
  $delta = $context['delta'];
  $class_id = $items[$delta]['course_id']['#value'];
  $element['_weight']['#type'] = 'hidden';
  $quarter = $items[$delta]['course_term']['#value'];
  $base_year = $element['#entity']->plan_base_year;
  $year = $base_year + $items[$delta]['course_year']['#value'];
  $options = graduation_planner_class_section_retrieve_sections($class_id, $year, $quarter);
  if (!empty($options)) {
    $element['course_section'] = array(
      '#type' => 'select',
      '#title' => t('Select section'),
      '#options' => $options,
      '#empty_option' => t('-- Select Section --'),
      '#empty_value' => 0,
      '#default_value' => isset($items[$delta]['course_section']) ? $items[$delta]['course_section'] : 0,
      '#ajax' => array(
        'callback' => 'graduation_planner_class_section_ajax_callback',
        'wrapper' => $context['field']['field_name'] . '-' . $delta,
      ),
    );

    $form_state_item = $form_state['values'][$context['field']['field_name']][LANGUAGE_NONE][$delta];

    if (isset($form_state['triggering_element'])) {

      $triggering_delta = explode('-', $form_state['triggering_element']['#name']);
      if ($triggering_delta[1] == $delta && $form_state['triggering_element']['#value'] == 'Approve') {
        $plan = graduation_planner_plan_load($form_state['values']['plan_id']);

        if (isset($form_state['values']['field_plan_courses'][LANGUAGE_NONE][$delta]['course_section'])) {
          $plan->field_plan_courses[LANGUAGE_NONE][$delta]['course_section'] = $form_state['values']['field_plan_courses'][LANGUAGE_NONE][$delta]['course_section'];

          entity_save('graduation_planner_plan', $plan);
        }
      }
      else {
        if (isset($form_state_item['course_section']) && $form_state_item['course_section'] > 0 && (isset($items[$delta]['course_section']) && $items[$delta]['course_section'] != $form_state_item['course_section'])) {
          $element['approve'] = array(
            '#type' => 'button',
            '#value' => t('Approve'),
            '#name' => 'approve-' . $delta,
            '#ajax' => array(
              'callback' => 'graduation_planner_class_section_approve_ajax_callback',
              'wrapper' => $context['field']['field_name'] . '-' . $delta,
            ),
          );
        }
      }
    }
  }
}

/**
 * Ajax callback for section.
 *
 * @param array $form
 *   Form array, generated by form builder functions.
 * @param array $form_state
 *   Current form_state, passed by reference.
 *
 * @return array
 *   Return the form element that was changed.
 */
function graduation_planner_class_section_ajax_callback($form, &$form_state) {

  $parents = $form_state['triggering_element']['#parents'];
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  return $element;
}

/**
 * Ajax callback for section approval.
 *
 * @param array $form
 *   Form array, generated by form builder functions.
 * @param array $form_state
 *   Current form_state, passed by reference.
 *
 * @return array
 *   Return the form element that was changed.
 */
function graduation_planner_class_section_approve_ajax_callback($form, &$form_state) {

  $parents = $form_state['triggering_element']['#parents'];
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  return $element;
}

/**
 * Section approval form submission function.
 *
 * @param array $form
 *   Form array, generated by form builder functions.
 * @param array $form_state
 *   Current form_state, passed by reference.
 */
function graduation_planner_class_section_approve_submit($form, &$form_state) {

  $form_state['rebuild'] = TRUE;
}

/**
 * Get a list of sections belong to this class.
 *
 * @param object $class
 *   GraduationPlannerClass entity.
 *
 * @return array
 *   Return a renderable content array of the sections belonging to this class.
 */
function graduation_planner_class_section_list($class) {

  // Create a new EntityFieldQuery.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'graduation_planner_class_section');
  $query->propertyCondition('class_id', $class->class_id);
  $query->propertyOrderBy('year', 'DESC');
  $query->propertyOrderBy('quarters', 'DESC');
  $result = $query->execute();
  $rows = array();

  // If rows were retrieved...
  if (isset($result['graduation_planner_class_section'])) {

    // Get the section_ids from the resultset.
    $section_ids = array_keys($result['graduation_planner_class_section']);

    // Get sections from section_ids.
    $sections = entity_load('graduation_planner_class_section', $section_ids);

    // Get the quarter list.
    $quarters = graduation_planner_quarter_list();

    // Iterate over the sections.
    foreach ($sections as $section) {
      $rows[] = array(
        'data' => array(
          'year' => $section->year,
          'quarter' => $quarters[$section->quarters],
          'class_section' => $section->class_section,
        ),
      );
    }
  }
  $content = array();

  // Create a link to create a new section.
  $content['create_section'] = array(
    '#theme' => 'link',
    '#text' => t('New section'),
    '#path' => 'class/' . $class->class_id . '/section/new',
    '#weight' => -100,
    '#options' => array(
      'attributes' => array('class' => array('button'), 'id' => 'new-section'),
      'html' => FALSE,
    ),
    '#access' => graduation_planner_class_access('create class'),
  );

  // Add a section table to the content array.
  $content['section_list'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#empty' => t('This class has no sections'),
    '#header' => array(t('Year'), t('Quarter'), t('Section ID')),
  );

  // Return the renderable content array.
  return $content;
}

/**
 * Entity for GraduationPlannerClassSection.
 */
class GraduationPlannerClassSection extends Entity {

  /**
   * Returns the default label of this entity.
   *
   * @return string
   *   Return the default label of this entity.
   */
  protected function defaultLabel() {
    return $this->title;
  }

  /**
   * Get the path to the entity.
   *
   * @return array
   *   Returns a URI array with a path.
   */
  protected function defaultUri() {
    return array('path' => 'class/' . $this->identifier());
  }

}

/**
 * Controller for GraduationPlannerClassSection.
 */
class GraduationPlannerClassSectionController extends EntityAPIController {

  /**
   * Creates a GraduationPlannerClassSection entity, populating defaults.
   *
   * @param array $values
   *   Values to be passed into the builder.
   *
   * @return object
   *   Return a completely built GraduationPlannerClassSection entity.
   */
  public function create(array $values = array()) {

    $values += array(
      'title' => '',
      'description' => '',
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      'type' => 'graduation_planner_class_section',
    );
    return parent::create($values);
  }

}

/**
 * Implements hook_entity_info().
 */
function graduation_planner_class_section_entity_info() {
  $entities = array();
  $entities['graduation_planner_class_section'] = array(
    'label' => t('Graduation Planner - Class Section'),
    'entity class' => 'GraduationPlannerClassSection',
    'controller class' => 'GraduationPlannerClassSectionController',
    'base table' => 'graduation_planner_class_section',
    'revision table' => 'graduation_planner_class_section_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'section_id',
      'bundle' => 'type',
      'revision' => 'revision_id',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'graduation_planner_class_section' => array(
        'label' => t('Graduation Planner - Class Section'),
        'admin' => array(
          'path' => 'admin/structure/graduation_planner_class_section/manage',
          'access arguments' => array('administer graduation_planner_class entities'),
        ),
      ),
    ),
    'load hook' => 'graduation_planner_class_section_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'graduation_planner_class_section_uri',
    'module' => 'graduation_planner_class_section',
    'access callback' => 'graduation_planner_class_section_access',
  );
  return $entities;
}

/**
 * Gets the URI to the section object.
 *
 * @param object $section
 *   The GraduationPlannerClassSection object to work with.
 *
 * @return array
 *   Returns a URI array with path.
 */
function graduation_planner_class_section_uri($section) {
  return array('path' => 'class/' . $section->class_id . '/section/' . $section->identifier());
}
function graduation_planner_class__section_exporter_definition() {
  $info = entity_get_info('graduation_planner_class_section');
  return array('graduation_planner_class_section' => $info);
}

function graduation_planner_class_section_importer_definition() {
  return array(
    'graduation_planner_class_section' => array(
      'import callback' => 'graduation_planner_class_section_import'
    ),
  );
}

function graduation_planner_class_section_import($entities, $revisions) {
  $query = db_select('graduation_planner_class_section', 't');
  $query->fields('t', array('section_id'));
  $results = $query->execute();
  $class_ids = $results->fetchAllAssoc('section_id');

  entity_delete_multiple('graduation_planner_class_section', array_keys($class_ids));
  if (isset($revisions)) {
    foreach ($revisions as $revision) {
      
     
      $original = entity_load('graduation_planner_class_section', array($revision->section_id));
      
      if(empty($original))
      {
        $revision->is_new = TRUE;
        entity_save('graduation_planner_class_section', $revision);
        
      } else {
        $revision->is_new_revision = TRUE;
        entity_save('graduation_planner_class_section', $revision);
      }
      
    }
  }
}