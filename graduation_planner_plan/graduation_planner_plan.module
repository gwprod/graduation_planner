<?php

/**
 * @file
 * Graduation Planner Plan module file.
 */
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'graduation_planner_plan') . "/graduation_planner_plan.field.inc";

/**
 * Implements hook_graduation_planner_dashboard_info().
 */
function graduation_planner_plan_graduation_planner_dashboard_info() {
  return array(
    'callback' => 'graduation_planner_plan_dashboard_item',
  );
}

/**
 * Plan change ajax callback.
 *
 * Regenerates the plan based on the submitted changes,
 * annotates the new plan and sends it back.
 *
 * @param object $plan
 *    The $plan object sent by menu router.
 *
 * @return array
 *    A renderable form array.
 */
function graduation_planner_plan_ajax_callback($plan) {

  // Get the changes from $_POST
  $plan_changes = $_POST['changes'];

  // Update the plan with changes.
  // TODO: sanitize the changes to make sure no illicit data is being submitted.
  _graduation_planner_plan_change_plan($plan, $plan_changes);

  // Generate the schedule for the plan.
  $schedule = _graduation_planner_plan_get_schedule($plan);

  // Create a renderable array, to be passed to theme_item_list
  $content['plan'] = array(
    '#theme' => 'item_list',
    '#items' => $schedule,
    '#type' => 'ul',
    '#title' => '',
    '#attributes' => array('id' => 'graduation_planner_plan', 'class' => array('graduation_planner_plan')),
  );

  // Create ajax updates to be sent back to the client.
  $commands[] = ajax_command_replace('#graduation_planner_plan', drupal_render($content));
  $commands[] = ajax_command_replace('#content-messages', _graduation_planner_format_annotations($plan));

  // Return the array of ajax changes.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_menu().
 */
function graduation_planner_plan_menu() {
  $menu = array();
  $menu['admin/structure/graduation_planner_plan/manage'] = array(
    'title' => 'Graduation planner - plan admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_plan_admin_form'),
    'access arguments' => array('administer graduation_planner_plan entities'),
    'file' => 'graduation_planner_plan.admin.inc',
  );
  $menu['user/plan'] = array(
    'title' => 'My plan',
    'page callback' => 'graduation_planner_plan_display_plan',
    'page arguments' => array(),
    'access callback' => 'graduation_planner_plan_access',
    'access arguments' => array(array('view own plan', 'has plan')),
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['plan'] = array(
    'title' => 'Graduation plan',
    'page callback' => 'graduation_planner_plan_display_plan',
    'page arguments' => array(),
    'access callback' => 'graduation_planner_plan_access',
    'access arguments' => array(array('view own plan', 'has plan')),
    'type' => MENU_LOCAL_TASK,
  );
  $menu['plan/%graduation_planner_plan'] = array(
    'title' => 'Graduation plan',
    'title callback' => 'graduation_planner_plan_title',
    'title arguments' => array(1),
    'page callback' => 'graduation_planner_plan_display_plan',
    'page arguments' => array(1),
    'access callback' => 'graduation_planner_plan_access',
    'access arguments' => array('edit plan', 1),
  );
  $menu['plan/%graduation_planner_plan/view'] = array(
    'title' => 'Graduation plan',
    'title callback' => 'graduation_planner_plan_title',
    'title arguments' => array(1),
    'page callback' => 'graduation_planner_plan_display_plan',
    'page arguments' => array(1),
    'access callback' => 'graduation_planner_plan_access',
    'access arguments' => array('edit plan', 1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100,
  );

  $menu['plan/%graduation_planner_plan/ajax'] = array(
    'title' => 'Edit',
    'delivery callback' => 'ajax_deliver',
    'page callback' => 'graduation_planner_plan_ajax_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu['plan/%graduation_planner_plan/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_plan_delete_form', 1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

  $menu['plan/%graduation_planner_plan/wizard'] = array(
    'title' => 'Wizard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_plan_form', NULL, 1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $menu['plan/%graduation_planner_plan/pdf'] = array(
    'title' => 'PDF',
    'delivery callback' => '_graduation_planner_print_pdf',
    'page callback' => 'graduationa_planner_plan_display_plan_pdf',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $menu['plan/%graduation_planner_plan/substitutions'] = array(
    'title' => 'Course substitutions',
    'page callback' => 'graduationa_planner_plan_course_substitutions',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $menu['plan/%graduation_planner_plan/%/%'] = array(
    'title' => 'Graduation plan',
    'page callback' => 'graduation_planner_plan_display_plan_by_quarter',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content'),
  );
  $menu['plan/%graduation_planner_plan/%/%/view'] = array(
    'title' => 'View graduation plan',
    'page callback' => 'graduation_planner_plan_display_plan_by_quarter',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100,
  );
  $menu['plan/%graduation_planner_plan/inline-add/%/%'] = array(
    'title' => 'Add course',
    'page callback' => 'graduation_planner_plan_modal_callback',
    'page arguments' => array(
      'graduation_planner_plan_course_add_form',
      1,
      3,
      4,
    ),
    'type' => MENU_CALLBACK,
    'access arguments' => array('edit any plan'),
  );
  $menu['plan/%graduation_planner_plan/inline-add/%/%/%graduation_planner_class'] = array(
    'title' => 'Add course',
    'page callback' => 'graduation_planner_plan_modal_callback',
    'page arguments' => array(
      'graduation_planner_plan_course_add_form',
      1,
      3,
      4,
      5,
    ),
    'type' => MENU_CALLBACK,
    'access arguments' => array('edit any plan'),
  );
  $menu['plan/%graduation_planner_plan/inline-edit/%graduation_planner_class/%/%/%'] = array(
    'title' => 'Edit course',
    'page callback' => 'graduation_planner_plan_modal_callback',
    'page arguments' => array(
      'graduation_planner_plan_course_edit_form',
      1,
      3,
      4,
      5,
      6,
    ),
    'type' => MENU_CALLBACK,
    'access arguments' => array('edit any plan'),
  );
  $menu['plan/%graduation_planner_plan/inline-delete/%graduation_planner_class/%/%/%'] = array(
    'title' => 'Delete course',
    'page callback' => 'graduation_planner_plan_modal_callback',
    'page arguments' => array('graduation_planner_plan_course_delete_form',
      1,
      3,
      4,
      5,
      6,
    ),
    'type' => MENU_CALLBACK,
    'access arguments' => array('edit any plan'),
  );

  $menu['plan/new'] = array(
    'title' => 'New plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_plan_form'),
    'access arguments' => array('access content'),
  );
  $menu['user/%user/plan/new'] = array(
    'title' => 'New plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('graduation_planner_plan_form', 1),
    'access arguments' => array('access content'),
  );

  return $menu;
}

/**
 * Returns a title for the graduation plan.
 *
 * @param object $plan
 *    The plan object from the menu router.
 *
 * @return string
 *    A string with the name of the user's graduation plan.
 */
function graduation_planner_plan_title($plan) {
  $account = user_load($plan->uid);
  return format_username($account) . "'s graduation plan";
}

/**
 * Titles for modal windows used in this application.
 *
 * @return array
 *    Returns an array of modal window titles.
 */
function _graduation_planner_plan_modal_windows() {
  return array(
    'graduation_planner_plan_course_edit_form' => array(
      'title' => t('Graduation Planner Course Edit'),
    ),
    'graduation_planner_plan_course_delete_form' => array(
      'title' => t('Graduation Planner Delete Form'),
    ),
    'graduation_planner_plan_course_add_form' => array(
      'title' => t('Graduation Planner Add Form'),
    ),
  );
}

/**
 * Callback to generate a ctools modal dialog.
 */
function graduation_planner_plan_modal_callback() {

  // Get all arguments passed to this function.
  $args = func_get_args();

  // Pop off the form_id from the list of arguments.
  $form_id = array_shift($args);

  $modal_windows = _graduation_planner_plan_modal_windows();

  $modal = $modal_windows[$form_id];

  // Include ctools ajax and ctools modal.
  ctools_include('ajax');
  ctools_include('modal');

  // Generate a form_state stub with arguments and title.
  $form_state = array(
    'ajax' => TRUE,
    'title' => $modal['title'],
    'build_info' => array(
      'args' => $args,
    ),
  );

  // Use ctools to generate ajax instructions for the browser to create
  // a form in a modal popup.
  $output = ctools_modal_form_wrapper($form_id, $form_state);

  // If the form has been submitted, there may be additional instructions
  // such as dismissing the modal popup.
  if (!empty($form_state['ajax_commands'])) {
    $output = $form_state['ajax_commands'];
  }

  // Return the ajax instructions to the browser via ajax_render().
  print ajax_render($output);
  drupal_exit();
}

/**
 * Submit a course approval message for later processing.
 *
 * @param int $uid
 *    The user id of the user who is being approved for a course.
 * @param int $year
 *    The year this course is scheduled for.
 * @param int $quarter
 *    The quarter this course is scheduled for.
 * @param int $class_id
 *    The class_id of the class.
 * @param int $section_id
 *    The section_id of the section being assigned.
 */
function graduation_planner_plan_message($uid, $year, $quarter, $class_id, $section_id) {
  $query = db_merge('graduation_planner_plan_message')
      ->key(array(
        'uid' => $uid,
        'year' => $year,
        'quarter' => $quarter,
        'class_id' => $class_id,
      ))
      ->fields(array(
        'uid' => $uid,
        'year' => $year,
        'quarter' => $quarter,
        'class_id' => $class_id,
        'section_id' => $section_id,
        'timestamp' => REQUEST_TIME,
        'sent' => 0,
      ))
      ->execute($query);
}

/**
 * Creates a form for the safe deletion of a Plan object.
 *
 * @param array $form
 *    The initial form generated by the form builder functions.
 * @param array $form_state
 *    The current form state, passed by reference.
 * @param object $plan
 *    The plan object to be deleted.
 *
 * @return array
 *    A renderable form array.
 */
function graduation_planner_plan_delete_form(array $form, array &$form_state, $plan) {

  // A hidden form element which stores the plan ID.
  $form['plan_id'] = array(
    '#type' => 'hidden',
    '#value' => $plan->plan_id,
  );

  // A markup element which displays a warning.
  $form['warning'] = array(
    '#type' => 'item',
    '#markup' => t('Do you really want to delete this plan?'),
  );

  // A submit button.
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );
  return $form;
}

/**
 * Form submission function for plan deletion.
 *
 * @param array $form
 *   Initial form array from form builder functions.
 * @param array $form_state
 *   Current form state, passed by reference.
 */
function graduation_planner_plan_delete_form_submit(array $form, array &$form_state) {

  // Load the plan.
  $plan = graduation_planner_plan_load($form_state['values']['plan_id']);

  // Default redirect location.
  global $user;
  if ($plan->uid == $user->uid) {
    $url = '';
  }
  else {
    $program = graduation_planner_program_load($plan->plan_data['program_info']['program']);
    $url = 'department/' . $program->department_id . '/students';
  }

  // Delete the plan entity specified by the plan_id variable in 
  // $form_state['values'].
  entity_delete('graduation_planner_plan', $form_state['values']['plan_id']);

  // Redirect to the original location.
  $form_state['redirect'] = $url;
}

/**
 * Display a list of classes for a specific quarter and year.
 *
 * @param object $plan
 *    The plan object to be displayed.
 * @param int $year
 *    The year that this theme will display.
 * @param int $quarter
 *    The quarter that this theme will display.
 *
 * @return array
 *    A renderable array.
 */
function graduation_planner_plan_display_plan_by_quarter($plan, $year, $quarter) {

  // Get the scheduling information from the plan object.
  $schedule = _graduation_planner_plan_get_schedule($plan, TRUE, FALSE);

  // Create a renderable array which will display plan information for this 
  // specific year and quarter.
  $content['plan'] = array(
    '#theme' => 'item_list',
    '#items' => $schedule[$year]['children'][$quarter]['children'],
    '#type' => 'ul',
    '#title' =>check_plain($schedule[$year]['children'][$quarter]['data']),
    '#attributes' => array('class' => array('graduation_planner_plan')),
  );

  // Return the renderable array.
  return $content;
}

/**
 * Submission function for graduation_planner_plan_course_edit_form.
 *
 * @param array $form
 *    The form variable, generated by the form builder.
 * @param array $form_state
 *    The current form state, passed by reference.
 *
 */
function graduation_planner_plan_course_edit_form_submit(array $form, array &$form_state) {

  // Load the plan.
  $plan = graduation_planner_plan_load($form_state['values']['plan_id']);

  // Retrieve the delta from form state.
  $delta = $form_state['values']['delta'];

  $course_id = $form_state['values']['course_id'];
  $course_title = $form_state['values']['course']['course_title'];
  $course_units = $form_state['values']['course']['course_units'];
  if ($course_id > 0) {
    $course = graduation_planner_class_load($course_id);
    if (isset($form_state['values']['substitute_course']) && $form_state['values']['substitute_course'] == TRUE) {
      if ($course_title != graduation_planner_class_title($course)) {
        $substitution_course = graduation_planner_class_load_by_title($course_title);
        if (is_object($substitution_course)) {
          $plan->plan_data['course_substitutions'][$delta] = array(
            'original_course_id' => $course_id,
            'substituted_course_id' => $substitution_course->class_id,
          );
        }
        else {
          $plan->plan_data['course_substitutions'][$delta] = array(
            'original_course_id' => $course_id,
            'substituted_course_id' => 0,
            'substituted_course_title' => $course_title,
            'substituted_course_units' => $course_units,
          );
        }
      }
    }
    else {
      unset($plan->plan_data['course_substitutions'][$delta]);
    }
  }

  // Retrieve the course_options from form_state.
  $course_options = $form_state['values']['course_options'];

  // Iterate over course_options, updating the course.
  foreach ($course_options as $option_name => $value) {
    $plan->field_plan_courses[LANGUAGE_NONE][$delta][$option_name] = $value;
  }

  // Save the plan.
  entity_save('graduation_planner_plan', $plan);

  // Load the course.
  $planned_course = graduation_planner_class_load($plan->field_plan_courses[LANGUAGE_NONE][$delta]['course_id']);

  // Prepare the course for viewing.
  $planned_course_view = graduation_planner_plan_class_view($planned_course, 'list', $plan, $plan->field_plan_courses[LANGUAGE_NONE][$delta], $delta);

  // Retrieve the specific course options.
  $course = $plan->field_plan_courses[LANGUAGE_NONE][$delta];

  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();

  // Generate the ID.
  // TODO: Refactor.
  $id = 'class_' . $planned_course->class_id . '_' . $course['course_year'] . '_' . $course['course_term'] . '_' . $delta;

  // Initial assembly of the css classes this course will need.
  $classes = array(
    ($course['course_completed']) ? 'undraggable' : 'draggable',
    'unplanned',
  );

  // Retrieve the quarters this course is available.
  $quarters_available = array_filter(graduation_planner_class_quarters_available_field_data($planned_course));

  // Merge classes for quarters available into css classes array.
  $classes = array_merge($classes, graduation_planner_get_term_machine_name(array_keys($quarters_available)));

  // Create a list item for post to browser.
  $list_item = '<li id="' . $id . '" class="' . implode(' ', $classes) . '" units="' . _graduation_planner_plan_course_units($planned_course, $plan, $delta) . '">' . drupal_render($planned_course_view) . '</li>';

  // Tell the browser to replace the old item with the updated one.
  $form_state['ajax_commands'][] = ajax_command_replace('#class_' . $planned_course->class_id . '_' . $course['course_year'] . '_' . $course['course_term'] . '_' . $delta, $list_item);
  $form_state['ajax_commands'][] = ajax_command_invoke(NULL, 'update_totals');
}

/**
 * Plan course add form.
 *
 * @param array $form
 *   Form array generated by the form builder functions.
 * @param array $form_state
 *   Current state of the form, passed by reference.
 * @param object $plan
 *   (Optional) The GraduationPlannerPlan entity object.
 * @param int $year
 *   (Optional) The year to add this class.
 * @param int $quarter
 *   (Optional) The quarter to add this class.
 * @param object $class
 *   (Optional) The GraduationPlannerClass entity object.
 *
 * @return array
 *   Returns a form array.
 */
function graduation_planner_plan_course_add_form(array $form, array &$form_state, $plan = NULL, $year = NULL, $quarter = NULL, $class = NULL) {

  // If this form has previously submitted values, use them instead.
  if (isset($form_state['values'])) {
    $plan = graduation_planner_plan_load($form_state['values']['plan_id']);
    $year = $form_state['values']['year'];
    $quarter = $form_state['values']['quarter'];
  }

  // Add a hidden value for the year.
  $form['year'] = array(
    '#type' => 'hidden',
    '#value' => isset($year) ? $year : 0,
  );

  // Add a hidden value for the quarter.
  $form['quarter'] = array(
    '#type' => 'hidden',
    '#value' => isset($quarter) ? $quarter : 0,
  );

  // If there is a plan (there should be)...
  if (isset($plan)) {
    // Add a hidden form element for the plan_id
    $form['plan_id'] = array(
      '#type' => 'hidden',
      '#value' => $plan->plan_id,
    );

    // If there is a class loaded, we display a confirmation dialog.
    if (isset($class)) {

      // Add a hidden form element for class_id
      $form['class_id'] = array(
        '#type' => 'hidden',
        '#value' => $class->class_id,
      );

      // Add a confirmation dialog message.
      $form['class_markup'] = array(
        '#type' => 'markup',
        '#markup' => t('Are you sure you want to add @class_name', array('@class_name' => graduation_planner_class_title($class))),
        '#prefix' => '<div>',
        '#suffix' => '</div>',
      );
    }

    // Otherwise, the user must select a class.
    else {

      // If the department has been previously loaded...
      if (isset($form_state['values']['department_id']) && $form_state['values']['department_id'] > 0) {

        $department_id = $form_state['values']['department_id'];
      }

      // Create a select box for the department.
      $form['department_id'] = array(
        '#type' => 'select',
        '#default_value' => isset($department_id) ? $department_id : 0,
        '#empty_option' => t('-Select-'),
        '#empty_value' => 0,
        '#prefix' => '<div class="text-full-wrapper">',
        '#title' => t('Department'),
        '#options' => graduation_planner_department_get_departments(),
        '#suffix' => '</div>',
        '#ajax' => array(
          'callback' => 'graduation_planner_plan_class_ajax_callback',
          'wrapper' => 'add_class_id',
        ),
      );

      $form['class_id'] = array(
        '#type' => 'select',
        '#disabled' => !isset($department_id) || $department_id == 0,
        '#empty_option' => t('-Select-'),
        '#empty_value' => 0,
        '#prefix' => '<div class="text-full-wrapper" id="add_class_id">',
        '#title' => t('Course'),
        '#options' => isset($department_id) ? graduation_planner_department_class_options($department_id) : array(),
        '#suffix' => '</div>',
      );
    }
    $form['add'] = array(
      '#type' => 'submit',
      '#value' => t('Add class'),
    );
  }
  else {
    $form['warning'] = array(
      '#markup' => t('There is no plan object.  This is an error.'),
    );
  }
  return $form;
}

/**
 * Department list ajax callback.
 *
 * @param array $form
 *    The original form array.
 * @param array $form_state
 *    The form_state, passed by reference.
 *
 * @return int
 *    The class_id chosen.
 */
function graduation_planner_plan_class_ajax_callback(array $form, array &$form_state) {

  $parents = $form_state['triggering_element']['#parents'];
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);
  return $element['class_id'];
}

/**
 * Submission function for course add form.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 */
function graduation_planner_plan_course_add_form_submit(array $form, array &$form_state) {

  // Load the plan.
  $plan = graduation_planner_plan_load($form_state['values']['plan_id']);

  // Retrieve the class_id from form_state.
  $class_id = $form_state['values']['class_id'];

  // Retrieve the year from form_state.
  $year = $form_state['values']['year'];

  // Retrieve the quarter from form_state.
  $quarter = $form_state['values']['quarter'];

  // Add the class to the plan.
  $plan->field_plan_courses[LANGUAGE_NONE][] = array(
    'course_id' => $class_id,
    'course_term' => $quarter,
    'course_year' => $year,
    'course_placed' => $year > 0 ? 1 : 0,
    'course_completed' => 0,
    'course_locked' => 0,
    'course_section' => 0,
  );

  // Save the plan.
  entity_save('graduation_planner_plan', $plan);

  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();

  // Generate the schedule for the plan.
  $schedule = _graduation_planner_plan_get_schedule($plan);

  // Create a renderable array, to be passed to theme_item_list.
  $content['plan'] = array(
    '#theme' => 'item_list',
    '#items' => $schedule,
    '#type' => 'ul',
    '#title' => '',
    '#attributes' => array('id' => 'graduation_planner_plan', 'class' => array('graduation_planner_plan')),
  );

  // Create ajax updates to be sent back to the client.
  $form_state['ajax_commands'][] = ajax_command_replace('#graduation_planner_plan', drupal_render($content));
  $form_state['ajax_commands'][] = ajax_command_replace('#content-messages', _graduation_planner_format_annotations($plan));
}

/**
 * Plan course delete form.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 * @param object $plan
 *    The plan object.
 * @param object $class
 *    The class this course reflects.
 * @param int $year
 *    The year of the course.
 * @param int $quarter
 *    The quarter of the course.
 * @param int $delta
 *    The course's location in field storage.
 *
 * @return array
 *    The completed form array.
 */
function graduation_planner_plan_course_delete_form(array $form, array &$form_state, $plan, $class, $year, $quarter, $delta) {
  $form['plan_id'] = array(
    '#type' => 'hidden',
    '#value' => $plan->plan_id,
  );
  $form['warning'] = array(
    '#markup' => t('Are you sure you want to delete this course from your plan?'),
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );
  $form['delta'] = array(
    '#type' => 'hidden',
    '#value' => $delta,
  );

  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );
  return $form;
}

/**
 * Submission function for course delete form.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 */
function graduation_planner_plan_course_delete_form_submit(array $form, array &$form_state) {

  // Load the plan.
  $plan = graduation_planner_plan_load($form_state['values']['plan_id']);

  // Retrieve the delta from form state.
  $delta = $form_state['values']['delta'];

  // Unset the course.
  unset($plan->field_plan_courses[LANGUAGE_NONE][$delta]);

  // Save the plan.
  entity_save('graduation_planner_plan', $plan);

  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();

  // Generate the schedule for the plan.
  $schedule = _graduation_planner_plan_get_schedule($plan);

  // Create a renderable array, to be passed to theme_item_list.
  $content['plan'] = array(
    '#theme' => 'item_list',
    '#items' => $schedule,
    '#type' => 'ul',
    '#title' => '',
    '#attributes' => array(
      'id' => 'graduation_planner_plan', 
      'class' => array('graduation_planner_plan')),
  );

  // Create ajax updates to be sent back to the client.
  $form_state['ajax_commands'][] = ajax_command_replace('#graduation_planner_plan', drupal_render($content));
  $form_state['ajax_commands'][] = ajax_command_replace('#content-messages', _graduation_planner_format_annotations($plan));
}

/**
 * Course edit form within modal dialog.
 *
 * @param array $form
 *    The form variable, generated by the form builder.
 * @param array $form_state
 *    The current form state, passed by reference.
 * @param object $plan
 *    The plan object.
 * @param object $class
 *    The class this plan item is an instance of.
 * @param int $year
 *    The year this plan item is scheduled for.
 * @param int $quarter
 *    The quarter this plan item is scheduled for.
 * @param int $delta
 *    The item number in the plan.
 *
 * @return array
 *    A renderable form array.
 */
function graduation_planner_plan_course_edit_form(array $form, array &$form_state, $plan, $class, $year, $quarter, $delta) {

  // A hidden form element for the plan ID.
  $form['plan_id'] = array(
    '#type' => 'hidden',
    '#value' => $plan->plan_id,
  );

  // Retrieve the quarter names.
  // TODO: Refactor.
  $quarters = graduation_planner_get_terms();

  // Retrieve the item to be manipulated.
  $planned_course = $plan->field_plan_courses[LANGUAGE_NONE][$delta];

  $substitution_class_id = 0;
  $substitute_course_value = isset($plan->plan_data['course_substitutions'][$delta]) ? 1 : 0;
  if (isset($form_state['values']['substitute_course'])) {
    $substitute_course_value = $form_state['values']['substitute_course'];
  }
  $course_title = graduation_planner_class_title($class);
  if ($substitute_course_value) {
    if (isset($plan->plan_data['course_substitutions'][$delta])) {
      if ($plan->plan_data['course_substitutions'][$delta]['substituted_course_id'] > 0) {

        $substitution_class = graduation_planner_class_load($plan->plan_data['course_substitutions'][$delta]['substituted_course_id']);
        $substitution_class_id = $substitution_class->class_id;
        $course_title = graduation_planner_class_title($substitution_class);
      }
      else {

        $course_title = $plan->plan_data['course_substitutions'][$delta]['substituted_course_title'];
      }
      $course_units = _graduation_planner_plan_course_units($class, $plan, $delta);
    }
  }

  // Hidden form element for the plan item delta.
  $form['delta'] = array(
    '#type' => 'hidden',
    '#value' => $delta,
  );

  // Course details markup.
  $form['course_id'] = array(
    '#type' => 'hidden',
    '#value' => $class->class_id,
  );

  $form['substitute_course'] = array(
    '#type' => 'checkbox',
    '#title' => t('Substitute Course'),
    '#name' => 'substitute_course',
    '#default_value' => $substitute_course_value,
    '#ajax' => array(
      'callback' => 'graduation_planner_plan_course_edit_substitution_ajax',
      'wrapper' => 'course',
    ),
  );
  $form['course'] = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="course">',
    '#suffix' => '</div>',
  );
  if ($substitute_course_value) {
    $form['course']['course_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Course title'),
      '#default_value' => $course_title,
      '#weight' => -1000,
      '#description' => t('Editing this field will create a course substitution record, proceed with caution.'),
    );
    $form['course']['course_units'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Course Units'),
      '#element_validate' => array('_graduation_planner_plan_validate_course_units'),
      '#default_value' => isset($course_units) ? $course_units : '',
    );
  }
  else {
    $form['course']['course_title'] = array(
      '#type' => 'item',
      '#title' => t('Course title'),
      '#markup' => $course_title,
      '#weight' => -1000,
    );
  }

  // Create a hierarchy of course options.
  $form['course_options'] = array(
    '#tree' => TRUE,
  );

  // Get a list of sections for this item.
  $planned_class = isset($substitution_class_id) ? ($substitution_class_id > 0 ? $substitution_class : NULL) : $class;
  if (isset($planned_class)) {
    $options = graduation_planner_class_section_retrieve_sections($class->class_id, $year, $quarter);

    // If there are options, display them.
    if (!empty($options)) {
      $form['course_options']['course_section'] = array(
        '#type' => 'select',
        '#title' => t('Select Section'),
        '#options' => $options,
        '#empty_option' => t('-- Select Section --'),
        '#empty_value' => 0,
        '#default_value' => isset($planned_course['course_section']) ? $planned_course['course_section'] : 0,
      );

      // If there are no options, display a warning that there are no sections 
      // available.
    }
    else {
      $form['course_options']['course_section_markup'] = array(
        '#markup' => t('This course has no sections for @term @year', array(
          '@term' => $quarters[$planned_course['course_term']],
          '@year' => graduation_planner_format_year($planned_course['course_year']),
            )
        ),
      );
    }
  }
  // Checkbox describing whether the course is complete.
  $form['course_options']['course_completed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Complete'),
    '#attributes' => array(
      'class' => array('course_complete'),
    ),
    '#default_value' => $planned_course['course_completed']
  );

  // Submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  // Return the renderable form array.
  return $form;
}

/**
 * AJAX callback for course substitution checkbox.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 *
 * @return array
 *    The updated form array for index 'course'
 */
function graduation_planner_plan_course_edit_substitution_ajax(array $form, array &$form_state) {
  $form_state['rebuild'] = TRUE;
  return $form['course'];
}

/**
 * Generate an add course link.
 *
 * @param object $plan
 *    The plan object.
 * @param int $quarter
 *    The quarter this new course will be added to.
 * @param int $year
 *    The year this new course will be added to.
 *
 * @return array
 *    A renderable array for a link.
 */
function _graduation_planner_plan_format_add_course_link($plan, $quarter, $year) {
  $add_link = array(
    '#theme' => 'link',
    '#text' => 'Add course',
    '#path' => 'plan/' . $plan->plan_id . '/inline-add/' . $quarter . '/' . $year,
    '#options' => array(
      'attributes' => array(
        'class' => array(
          'ctools-use-modal',
          'ctools-modal-dialog',
          'ui-add',
        ),
        'title' => t('Add course to plan.'),
      ),
      'html' => FALSE,
    ),
    '#access' => user_access('edit any plan'),
    '#weight' => 1001,
  );
  return drupal_render($add_link);
}

/**
 * Organizes a plan's schedule by year and quarter for rendering.
 *
 * @param object $plan
 *    The plan object.
 * @param bool $display_year
 *    Include the individual year when generating the quarter title.
 * @param bool $display_link
 *    Create a link to the year/quarter subview.
 *
 * @return array
 *    An array of scheduling information.
 */
function _graduation_planner_plan_get_schedule($plan, &$planned_units, &$unplanned_units, $display_year = FALSE, $display_link = FALSE) {

  // Retrieve the names of the quarters.
  $quarters = graduation_planner_get_terms();

  // Create a blank array to store our scheduling information.
  $schedule = array();

  // Create an array which will store the total credits for each quarter, 
  // keyed by year and quarter.
  $total_credits = array();

  // Create an array which will the header information for the quarter, 
  // keyed by year and quarter.
  $quarter_header = array();

  // If the unplaced classes header has not already been generated 
  // (it shouldn't have), generate it.
  if (!isset($schedule['0000']['children']['unplaced'])) {
    $schedule['0000']['children']['unplaced'] = array(
      'data' => '<h2 class="unplaced_courses">Unplaced Courses</h2>',
      'children' => array(
        array(
          'data' => t('Placeholder'),
          'class' => array('empty-placeholder'),
        ),
      ),
      'class' => array('quarter', 'unplanned', 'connectedSortable'),
      'id' => '0000-unplanned',
    );
  }
  // Iterate over the courses laid out in the plan.
  foreach ($plan->field_plan_courses[LANGUAGE_NONE] as $delta => $course) {

    // If the course has been placed at a specific time in the plan...
    if ($course['course_placed'] == 1) {

      // check that there is an index in the schedule for the year in question.
      // If there isn't...
      if (!isset($schedule[$course['course_year']])) {

        // Create an index in the schedule for this year and label it.
        $schedule[$course['course_year']] = array(
          'data' => '<h2 class="year_header">' . graduation_planner_format_year($course['course_year']) . '</h2>',
          'children' => array(),
        );

        // Since there wasn't a year already provisioned in the array, there 
        // aren't quarters provisioned in the array either, so provision them.
        // Iterate over the quarters.
        foreach ($quarters as $quarter_id => $quarter) {

          // Generate the header of this list.
          $quarter_header[$course['course_year']][$quarter_id] = $display_year ? $quarters[$quarter_id] . ' ' . graduation_planner_format_year($course['course_year']) : $quarters[$quarter_id];
          $quarter_header[$course['course_year']][$quarter_id] = $display_link ? l($quarter_header[$course['course_year']][$quarter_id], 'plan/' . $plan->plan_id . '/' . $course['course_year'] . '/' . $quarter_id) : $quarter_header[$course['course_year']][$quarter_id];

          // Provision the quarter list to accept children.
          $schedule[$course['course_year']]['children'][$quarter_id] = array(
            'data' => '<h3 class="quarter_header">' . $quarter_header[$course['course_year']][$quarter_id] . '</h3>
                            <div class="total_credits"><span class="total_credits">Total Credits: 0</span>' . _graduation_planner_plan_format_add_course_link($plan, $course['course_year'], $quarter_id) . '</div>',
            'children' => array(
              array(
                'data' => t('Placeholder'),
                'class' => array('empty-placeholder'),
              ),
            ),
            'class' => array(
              'quarter', 
              'connectedSortable', 
              implode('', graduation_planner_get_term_machine_name(array($quarter_id)))),
            'id' => $course['course_year'] . '-' . implode('', graduation_planner_get_term_machine_name(array($quarter_id))),
          );
        }
      }

      // Get the class and prepare it for display.
      $planned_class = graduation_planner_class_load($course['course_id']);

      // Generate the view of the class.
      $planned_class_view = graduation_planner_plan_class_view($planned_class, 'list', $plan, $course, $delta);

      // Get the quarters this class is available.
      $quarters_available = array_filter(graduation_planner_class_quarters_available_field_data($planned_class));

      if (!isset($plan->plan_data['basic_info']['allow_summer']) || $plan->plan_data['basic_info']['allow_summer'] != TRUE) {
        unset($quarters_available[3]);
      }

      // Add the prepared class into the array.
      $schedule[$course['course_year']]['children'][$course['course_term']]['children'][] = array(
        'data' => drupal_render($planned_class_view),
        'id' => 'class_' . $planned_class->class_id . '_' . $course['course_year'] . '_' . $course['course_term'] . '_' . $delta,
        'units' => _graduation_planner_plan_course_units($planned_class, $plan, $delta),
        'class' => array_merge(array(
          ($course['course_completed']) ? 'undraggable' : 'draggable', 
          'unplanned',
            ), graduation_planner_get_term_machine_name(array_keys($quarters_available))),
      );

      // If the total credits array has not already been initialized for this 
      // year and term, initialize it.
      if (!isset($total_credits[$course['course_year']][$course['course_term']])) {
        $total_credits[$course['course_year']][$course['course_term']] = 0;
      }

      // Update the total credits.
      $units = _graduation_planner_plan_course_units($planned_class, $plan, $delta);
      $total_credits[$course['course_year']][$course['course_term']] += $units;
      $planned_units += $units;

      // Add the total credits.
      $schedule[$course['course_year']]['children'][$course['course_term']]['data'] = '<h3 class="quarter_header">' . $quarter_header[$course['course_year']][$course['course_term']] . '</h3><div class="total_credits">Total Credits: <span class="total_credits">' . $total_credits[$course['course_year']][$course['course_term']] . '</span>' . _graduation_planner_plan_format_add_course_link($plan, $course['course_year'], $course['course_term']) . '</div>';
    }
    // If the course has NOT been placed at a specific location within the plan.
    else {

      // Check that an index for unplaced classes exists.  If it doesn't, 
      // create it.
      if (!isset($schedule['0000']['children']['unplaced'])) {
        $schedule['0000']['children']['unplaced'] = array(
          'data' => '<h2 class="unplaced_courses">Unplaced Courses</h2>',
          'children' => array(),
          'class' => array('quarter', 'unplanned', 'connectedSortable'),
          'id' => '0000-unplanned',
        );
      }

      // Get the class and prepare it for display.
      $planned_class = graduation_planner_class_load($course['course_id']);

      // Generate the view of the class.
      $planned_class_view = graduation_planner_plan_class_view($planned_class, 'list', $plan, $course, $delta);

      // Get the quarters this class is available.
      $quarters_available = array_filter(graduation_planner_class_quarters_available_field_data($planned_class));
      if (!isset($plan->plan_data['basic_info']['allow_summer']) || $plan->plan_data['basic_info']['allow_summer'] != TRUE) {
        unset($quarters_available[3]);
      }

      // Add the prepared class into the array.
      $schedule['0000']['children']['unplaced']['children'][] = array(
        'data' => drupal_render($planned_class_view),
        'id' => 'class_' . $planned_class->class_id . '_' . $course['course_year'] . '_' . $course['course_term'] . '_' . $delta,
        'units' => _graduation_planner_plan_course_units($planned_class, $plan, $delta),
        'class' => array_merge(
            array(
          ($course['course_completed']) ? 'undraggable' : 'draggable',
          'unplanned',
            ), _graduation_planner_class_get_terms(array_keys($quarters_available))),
      );
      $unplanned_units += $planned_class->class_units;
    }
  }

  // Sort the schedule by key (this ensures that 0000-unplaced is first, and 
  // that it then progresses by year).
  ksort($schedule);

  // Return the completed schedule array.
  return $schedule;
}

/**
 * A form to include in the notifications about the plan.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 * @param object $plan
 *    The plan object.
 *
 * @return array
 *    The completed form array.
 */
function graduation_planner_plan_change_form(array $form, array &$form_state, $plan) {

  $form['plan_id'] = array(
    '#type' => 'hidden',
    '#value' => $plan->plan_id,
  );

  // If the user is not an advisor.
  if (!user_access('edit any plan')) {
    $form['plan_warning'] = array(
      '#markup' => t('This plan has not been approved.  Please contact your advisor.'),
    );
  }
  // If the user is an advisor.
  else {
    $form['plan_warning'] = array(
      '#markup' => t('This plan has not been approved.  Click the Approve button to approve this plan.'),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Approve Plan'),
    );
  }
  return $form;
}

/**
 * Update the plan based on the changes passed by AJAX.
 *
 * @param object $plan
 *    The plan object.
 * @param array $plan_changes
 *    An array of changes to the plan.
 */
function _graduation_planner_plan_change_plan(&$plan, array $plan_changes) {
  $changes = array();
  foreach ($plan_changes as $plan_year_id => $plan_year) {
    foreach ($plan_year as $plan_quarter_id => $plan_quarter) {
      foreach ($plan_quarter as $plan_combined_id) {
        $plan_data = explode('_', $plan_combined_id);
        $plan_course_id = $plan_data[0];
        $plan_original_delta = $plan_data[1];
        $year = $plan_year_id;
        $base_id = $plan_year_id . '-' . $plan_quarter_id;
        $sequence = 0;
        while (isset($changes[$plan_course_id][$base_id . '-' . $sequence])) {
          $sequence++;
        }
        $changes[$plan_course_id][$base_id . '-' . $sequence] = array(
          'course_term' => graduation_planner_quarter_by_name($plan_quarter_id),
          'course_year' => ($year < 0) ? 0 : $year,
          'course_id' => $plan_course_id,
          'course_placed' => $plan_year_id >= $plan->plan_base_year ? 1 : 0,
          'plan_original_delta' => $plan_original_delta,
        );
      }
    }
  }
  foreach ($plan->field_plan_courses[LANGUAGE_NONE] as $delta => &$value) {
    foreach ($changes[$value['course_id']] as $change_id => $change) {
      if ($changes[$value['course_id']][$change_id]['plan_original_delta'] == $delta) {
        $changes[$value['course_id']][$change_id] += $value;
        if (isset($plan->plan_data['course_substitutions'][$delta])) {
          $changes[$value['course_id']][$change_id]['substitution'] = $plan->plan_data['course_substitutions'][$delta];
        }
      }
    }
  }

  unset($plan->field_plan_courses[LANGUAGE_NONE]);
  unset($plan->plan_data['course_substitutions']);
  $current_delta = 0;
  foreach ($changes as $course_change) {
    foreach ($course_change as $change) {
      $plan->field_plan_courses[LANGUAGE_NONE][$current_delta] = $change;
      if (isset($change['substitution'])) {
        $plan->plan_data['course_substitutions'][$current_delta] = $change['substitution'];
      }
      $current_delta++;
    }
  }
  if (isset($plan->approved_uid)) {
    unset($plan->approved_uid);
    $plan->is_new_revision = TRUE;
  }
  entity_save('graduation_planner_plan', $plan);
}

/**
 * The plan change approval form submission function.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 */
function graduation_planner_plan_change_form_submit(array $form, array &$form_state) {
  $plan = graduation_planner_plan_load($form_state['values']['plan_id']);
  global $user;
  $plan->approved_uid = $user->uid;
  entity_save('graduation_planner_plan', $plan);
}

/**
 * View function for a class in the context of the plan.
 *
 * @param object $class
 *    The class object to be displayed.
 * @param string $view_mode
 *    The view mode used when attaching fields.
 * @param object $plan_course
 *    The individual instance of the class.
 * @param int $delta
 *    The location of this object in field storage.
 *
 * @return array
 *    A renderable array.
 */
function graduation_planner_plan_class_view($class, $view_mode = 'list', $plan, $plan_course, $delta) {

  // Initialize the content property of the class as an array.
  $class->content = array();

  // Generate the initial content for the class object from 
  // GraduationPlannerClass::buildContent.
  $class->content = entity_get_controller($class->type)->buildContent($class, $view_mode);

  // Attach any fields that need to be attached for this view mode.
  $class->content += field_attach_view('graduation_planner_class', $class, $view_mode);

  if (isset($plan->plan_data['course_substitutions'][$delta])) {
    if ($plan->plan_data['course_substitutions'][$delta]['substituted_course_id'] > 0) {
      $substituted_class = graduation_planner_class_load($plan->plan_data['course_substitutions'][$delta]['substituted_course_id']);
      $substituted_class_title = graduation_planner_class_title($substituted_class);
    }
    else {
      $substituted_class_title = $plan->plan_data['course_substitutions'][$delta]['substituted_course_title'];
    }
    $class->content['title']['#items'] = array(array('value' => $substituted_class_title));
    $class->content['title'][0]['#markup'] = check_plain($substituted_class_title);
    $class->content['substituted_title'] = array(
      '#theme' => 'field',
      '#weight' => $class->content['title']['#weight'] - 1,
      '#title' => t('Substituted Course name'),
      '#label_display' => 'hidden',
      '#view_mode' => $view_mode,
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_substituted_title',
      '#field_type' => 'text',
      '#entity_type' => 'graduation_planner_class',
      '#bundle' => $class->type,
      '#attributes' => array(
        'class' => array('strike-through'),
      ),
      '#items' => array(array('value' => graduation_planner_class_title($class))),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain(graduation_planner_class_title($class))),
    );
  }
  // If the plan_course has a section specified, display it.
  if ($plan_course['course_section'] > 0) {
    $class->content['section'] = array(
      '#title' => t('Section'),
      '#theme' => 'field',
      '#weight' => 99,
      '#label_display' => 'inline',
      '#view_mode' => $view_mode,
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_section',
      '#field_type' => 'text',
      '#entity_type' => 'graduation_planner_class',
      '#bundle' => $class->type,
      '#items' => array(array('value' => $plan_course['course_section'])),
      '#formatter' => 'text_default',
      0 => array('#markup' => $plan_course['course_section']),
    );
  }
  if ($plan_course['course_placed']) {
    $class->content['edit'] = array(
      '#theme' => 'link',
      '#text' => 'Edit',
      '#path' => 'plan/' . $plan->plan_id . '/inline-edit/' . $class->class_id . '/' . $plan_course['course_year'] . '/' . $plan_course['course_term'] . '/' . $delta,
      '#options' => array(
        'attributes' => array(
          'class' => array(
            'ctools-use-modal',
            'ctools-modal-dialog',
            'ui-edit',
          ),
          'title' => t('Edit course.'),
        ),
        'html' => FALSE,
      ),
      '#access' => user_access('edit any plan'),
      '#weight' => -1000,
    );
  }
  if (!$plan_course['course_completed']) {
    $class->content['delete'] = array(
      '#theme' => 'link',
      '#text' => 'Delete',
      '#path' => 'plan/' . $plan->plan_id . '/inline-delete/' . $class->class_id . '/' . $plan_course['course_year'] . '/' . $plan_course['course_term'] . '/' . $delta,
      '#options' => array(
        'attributes' => array(
          'class' => array(
            'ctools-use-modal',
            'ctools-modal-dialog',
            'ui-delete',
          ),
          'title' => t('Delete course from plan.'),
        ),
        'html' => FALSE,
      ),
      '#access' => user_access('edit any plan'),
      '#weight' => -1001,
    );
  }
  // Display the current status of the class.
  $class->content['status'] = array(
    '#title' => t('Status'),
    '#theme' => 'field',
    '#weight' => 100,
    '#label_display' => 'inline',
    '#view_mode' => $view_mode,
    '#language' => LANGUAGE_NONE,
    '#field_name' => 'field_fake_status',
    '#field_type' => 'text',
    '#entity_type' => 'graduation_planner_class',
    '#bundle' => $class->type,
    '#items' => array(array('value' => _graduation_planner_plan_course_status($plan_course))),
    '#formatter' => 'text_default',
    0 => array('#markup' => _graduation_planner_plan_course_status($plan_course)),
  );
  $annotations = graduation_planner_plan_annotate_plan($plan);

  if (isset($annotations[$class->class_id]['view_data'])) {
    $class->content['error'] = array(
      '#title' => t('Error'),
      '#theme' => 'field',
      '#weight' => 101,
      '#label_display' => 'hidden',
      '#view_mode' => $view_mode,
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_error',
      '#field_type' => 'text',
      '#entity_type' => 'graduation_planner_class',
      '#bundle' => $class->type,
      '#items' => array(array('value' => $annotations[$class->class_id]['view_data'])),
      '#formatter' => 'text_default',
      0 => array('#markup' => drupal_render($annotations[$class->class_id]['view_data'])),
    );
  }
  // Prepare the content for rendering.
  $class->content += array(
    '#theme' => 'graduation_planner_plan_class__' . $view_mode,
    '#content' => $class->content,
    '#view_mode' => $view_mode,
    '#language' => NULL,
  );

  // Return the content.
  return $class->content;
}

/**
 * Annotation formatting function.
 *
 * @param object $plan
 *    The plan object.
 *
 * @return string
 *    HTML rendering of the plan annotations.
 *
 * @todo Refactor this.
 */
function _graduation_planner_format_annotations($plan) {
  $block_annotations = graduation_planner_plan_display_annotations($plan);
  if (strlen($block_annotations) > 5) {
    return
        '
      <div class="content-messages block" id="content-messages">
        <div class="content-messages-inner gutter" id="content-messages-inner">
          <div class="messages error"><div class="header"><h4>Warning</h4>This plan has the following issues:</div>' . $block_annotations . '</div></div><!-- /content-messages-inner -->
</div>';
  }
}

/**
 * Prepare the plan for rendering and display.
 *
 * @param object $plan
 *    The plan object.
 *
 * @return array
 *    A renderable array for the plan.
 */
function graduation_planner_plan_display_plan($plan = NULL) {

  // If no plan is specified, load the plan of the default user.
  if (!isset($plan)) {
    global $user;
    $plans = graduation_planner_plan_load_by_user($user);
    $plan = reset($plans);

    // If there is still no plan, redirect to plan creation.
    if (!isset($plan)) {
      drupal_goto('plan/new');
    }

    // We want to include the appropriate menu local tasks and breadcrumb.
    menu_set_active_item('plan/' . $plan->plan_id);
    menu_tree_set_path('user-menu', 'user/plan');
  }
  // Add javascript
  drupal_add_js(drupal_get_path('module', 'graduation_planner_class') . '/js/graduation_planner_class.js');
  drupal_add_js(array('graduation_planner_plan' => array('plan_url' => base_path() . 'plan/' . $plan->plan_id . '/ajax')), 'setting');

  // Use the Drupal javascript libraries for ajax, draggable, droppable and 
  // sortable.
  ctools_include('modal');
  ctools_modal_add_js();
  $ctools_modal_settings = array(
    'dialog' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 600,
        'height' => 240,
        'addWidth' => 10,
        'addHeight' => 10,
        'contentRight' => 0,
        'contentBottom' => 0,
      ),
      'modalOptions' => array(
        'opacity' => .6,
        'background-color' => '#684C31',
      ),
      'animation' => 'slideDown',
      'modalTheme' => 'ModalDialog',
    ),
  );
  drupal_add_js($ctools_modal_settings, 'setting');
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.droppable');
  drupal_add_library('system', 'ui.sortable');

  //
  // Try to add the touch-punch library so that mobile devices will work.
  libraries_load('jquery.ui.touch-punch');

  $planned_units = 0;
  $unplanned_units = 0;

  // Load the schedule.
  $schedule = _graduation_planner_plan_get_schedule($plan, $planned_units, $unplanned_units, FALSE, FALSE);

  // Format the schedule as an item_list.
  $content['annotations'] = array(
    '#markup' => _graduation_planner_format_annotations($plan),
    '#weight' => -1000,
  );

  $content['statistics'] = array(
    '#markup' => t('Total Planned Units: @planned_units.  Total Unplanned Units: @unplanned_units.  Total Units: @total_units', array('@planned_units' => $planned_units, '@unplanned_units' => $unplanned_units, '@total_units' => $planned_units + $unplanned_units)),
    '#weight' => -999,
  );

  $content['plan'] = array(
    '#theme' => 'item_list',
    '#items' => $schedule,
    '#type' => 'ul',
    '#title' => '',
    '#attributes' => array(
      'id' => 'graduation_planner_plan', 
      'class' => array('graduation_planner_plan'),
    ),
  );

  // Return the renderable array.
  return $content;
}

/**
 * Retrieves the courses from field storage and sorts them.
 *
 * @param object $plan
 *    The plan object.
 *
 * @return array
 *    An array of courses by year and quarter.
 */
function graduation_planner_plan_get_plan_data($plan) {
  $plan_data = array();
  foreach ($plan->field_plan_courses[LANGUAGE_NONE] as $delta => $value) {
    $plan_data[$value['course_year']][$value['course_term']][$delta] = $value;
  }
  foreach ($plan_data as $year_id => $year) {
    ksort($plan_data[$year_id]);
  }
  return $plan_data;
}

/**
 * Utility function for getting the step ID in a multi-step form
 *
 * @param string $step_name
 *    The name of the step.
 * 
 * @return int
 *    The step ID on found, or FALSE on not found.
 */
function _graduation_planner_plan_get_step_by_name($step_name) {

  // Retrieve the steps in the wizard.
  $steps = graduation_planner_form_steps();

  // Iterate over the array, looking for the given step name, returning it if 
  // found.
  foreach ($steps as $step_id => $step) {
    if ($step['name'] == $step_name) {
      return $step_id;
    }
  }

  // Name was not found, return FALSE.
  return FALSE;
}

/**
 * The steps for the planning wizard.
 *
 * @return array
 *    An array of wizard steps.
 */
function graduation_planner_form_steps() {
  return array(
    1 => array(
      'name' => 'basic_info',
      'form' => 'graduation_planner_plan_basic_info_form',
      'display_name' => t('Basic Info'),
    ),
    2 => array(
      'name' => 'gen_ed_info',
      'form' => 'graduation_planner_plan_general_education_form',
      'display_name' => t('General Education'),
    ),
    3 => array(
      'name' => 'program_info',
      'form' => 'graduation_planner_plan_programs_form',
      'display_name' => t('Programs'),
    ),
    4 => array(
      'name' => 'program_requirements',
      'form' => 'graduation_planner_plan_program_requirements_form',
      'display_name' => t('Program Requirements'),
    ),
    5 => array(
      'name' => 'elective_info',
      'form' => 'graduation_planner_plan_electives_form',
      'display_name' => t('Electives'),
    ),
  );
}

/**
 * Remove incomplete courses from plan.
 *
 * Iterates over the list of courses in the plan, removing any course
 * that has not been completed.  This will allow the plan generator to rearrange
 * any class which does not currently have a fixed position (complete, locked,
 * etc)
 *
 * TODO: Change the name of this function to imply what it actually does.
 * @param object $plan
 *    The plan object, by reference.
 * @param array $placed
 *    The array of placed classes, by reference.
 */
function _graduation_planner_plan_filter_out_incomplete(&$plan, array &$placed) {
  $temp_array = array();
  if (isset($plan->field_plan_courses[LANGUAGE_NONE])) {
    foreach ($plan->field_plan_courses[LANGUAGE_NONE] as $planned_course_sequence => $planned_course) {
      if ($planned_course['course_completed'] == 1 || $planned_course['course_locked'] == 1 || $planned_course['course_section'] > 0) {

        $temp_array[$planned_course_sequence] = $planned_course;
        $class_id = $planned_course['course_id'];
        $placed[$class_id] = $class_id;
      }
    }
  }
  $plan->field_plan_courses[LANGUAGE_NONE] = $temp_array;
}

/**
 * Returns a dynamic form completion breadcrumb.
 *
 * @param array $form
 *    The form array, passed by reference.
 * @param array $form_state
 *    The form state, passed by reference.
 *
 * @param int $current_step
 *    The step number.
 */
function _graduation_planner_plan_steps_tab_bar(array &$form, array &$form_state, $current_step) {
  $steps = graduation_planner_form_steps();
  foreach ($steps as $step_id => $step_info) {
    $form['step-' . $step_info['name']] = array(
      '#type' => 'submit',
      '#name' => 'step-' . $step_info['name'],
      '#value' => check_plain($step_info['display_name']),
      '#disabled' => !isset($form_state['step_information'][$step_id]['stored_values']),
      '#submit' => array('graduation_planner_plan_form_direct_submit'),
      '#limit_validation_errors' => array(),
    );
  }
}

/**
 * Constructs annotations for the plan.
 *
 * @param object $plan
 *    The plan object.
 *
 * @return array
 *    Returns an array of plan annotations.
 *
 * @todo implement better caching.
 */
function graduation_planner_plan_annotate_plan($plan) {
  $annotations = &drupal_static(__FUNCTION__);
  if (!isset($annotations[$plan->plan_id])) {
    $annotations = array();
    $placed_classes = array();
    $unplaced_classes = array();
    $completed_classes = graduation_planner_plan_get_completed($plan->plan_data);

    foreach ($completed_classes as $class_id => $completed_class) {
      $placed_classes[$class_id] = $class_id;
    }

    $requirements = graduation_planner_plan_generate_plan_requirements($plan->plan_data);
    $requirements = array_diff_key($requirements, $placed_classes);
    $plan_data = graduation_planner_plan_get_plan_data($plan);

    ksort($plan_data);
    foreach ($plan_data as $year_plan) {
      foreach ($year_plan as $quarter_plan) {

        $quarterly_placed_classes = $placed_classes;

        foreach ($quarter_plan as $course) {

          if ($course['course_placed'] == 1) {

            if (!isset($requirements[$course['course_id']]['class'])) {

              $sequence_course_found = FALSE;

              foreach ($requirements as $key => $value) {

                $parts = explode('-', $key);

                if (count($parts) > 1 && $parts[0] == $course['course_id']) {
                  if (!isset($quarterly_placed_classes[$key])) {
                    $quarterly_placed_classes[$key] = $value['class']->class_id;
                    $sequence_course_found = TRUE;

                    // Break out of foreach.
                    break;
                  }
                }
              }
              // If this course is not in multiple placed courses...
              if (!$sequence_course_found) {
                // Add it.
              }
            }
            else {
              $quarterly_placed_classes[$course['course_id']] = $course['course_id'];
            }
            $temp_remaining_requirements_for_course = isset($requirements[$course['course_id']]['requirements']) ? $requirements[$course['course_id']]['requirements'] : array();
            $remaining_requirements = array_diff($temp_remaining_requirements_for_course, $placed_classes);

            $course_data = graduation_planner_class_load($course['course_id']);

            if (count($remaining_requirements) > 0) {

              $items = array();
              $data = array();
              $required_classes = graduation_planner_class_load_multiple($remaining_requirements);
              foreach ($required_classes as $required_course) {

                $data[] = check_plain(graduation_planner_class_title($required_course));
                $items[] = array('data' => check_plain(graduation_planner_class_title($required_course)));
              }
              $annotations[$plan->plan_id][$course['course_id']] = array(
                'data' => check_plain(graduation_planner_class_title($course_data) . ' has unmet prerequisites: ' . implode(', ', $data)),
                'view_data' => array(
                  '#theme' => 'item_list',
                  '#items' => $items,
                  '#title' => t('Unmet prerequisites'),
                  '#type' => 'ul',
                  '#attributes' => array('class' => array('error')),
                ),
              );
            }
          }
          else {
            $course_data = graduation_planner_class_load($course['course_id']);
            $annotations[$plan->plan_id][$course['course_id']] = array(
              'data' => check_plain(graduation_planner_class_title($course_data) . ' is an unplaced required class.'),
            );
            $unplaced_classes[$course['course_id']] = $course['course_id'];
          }
        }
        $placed_classes = $quarterly_placed_classes;
      }
    }
    $classes_in_plan = $placed_classes + $unplaced_classes;
    $requirements = array_diff_key($requirements, $classes_in_plan);

    foreach ($requirements as $requirement) {

      $url = 'plan/' . $plan->plan_id . '/inline-add/0/0/' . $requirement['class']->class_id;
      $options = array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-dialog')));
      $annotations[$plan->plan_id][$requirement['class']->class_id] = array(
        'data' =>
        t('@class_name is a missing required class.', array(
          '@class_name' => graduation_planner_class_title($requirement['class']),
        )) . l(t('Add to plan'), $url, $options),
      );
    }
    if (!isset($plan->approved_uid)) {
      $form = drupal_get_form('graduation_planner_plan_change_form', $plan);

      $annotations[$plan->plan_id]['change_form'] = drupal_render($form);
    }
  }
  return $annotations[$plan->plan_id];
}

/**
 * Rendering function for plan annotations.
 *
 * @param object $plan
 *    The plan object.
 *
 * @return string
 *    HTML output.
 */
function graduation_planner_plan_display_annotations($plan) {
  $annotations = graduation_planner_plan_annotate_plan($plan);
  if (count($annotations) > 0) {
    $content = array(
      '#theme' => 'item_list',
      '#items' => $annotations,
      '#type' => 'ul',
    );

    return drupal_render($content);
  }
  return '';
}

/**
 * Plan generation function.
 *
 * @param array $plan_options
 *    The array of plan options for which to generate the plan.
 * @param object $plan
 *    The plan object.
 *
 * @return object
 *    The completely generated plan object.
 */
function graduation_planner_plan_generate_plan(array $plan_options, $plan = NULL) {
  global $user;
  $year = 0;

  if (!isset($plan)) {
    $plan = entity_get_controller('graduation_planner_plan')->create(array(
      'uid' => $plan_options['basic_info']['plan_owner'],
      'changed_by' => $user->uid,
      'status' => 1,
    ));
  }
  $plan->plan_base_year = $plan_options['basic_info']['academic_year'];
  if (is_array($plan->plan_data)) {
    $plan->plan_data = array_merge($plan->plan_data, $plan_options);
  }
  else {
    $plan->plan_data = $plan_options;
  }
  $quarters = graduation_planner_get_terms();
  $completed_classes = graduation_planner_plan_get_completed($plan_options);

  $cumulative_credits = _graduation_planner_plan_count_course_units($completed_classes);
  $placed_classes = array();
  foreach ($completed_classes as $class_id => $completed_class) {
    $placed_classes[$class_id] = $class_id;
  }
  _graduation_planner_plan_filter_out_incomplete($plan, $placed_classes);
  $requirements = graduation_planner_plan_generate_plan_requirements($plan_options);
  $requirements = array_diff_key($requirements, $placed_classes);
  $iterations = 5;

  unset($quarters[3]);
  if (!$plan_options['basic_info']['allow_summer']) {
    
  }
  $log = print_r($requirements, TRUE);
  graduation_planner_plan_place_unplaced_classes($plan, $requirements, $placed_classes, $cumulative_credits);
  while ((graduation_planner_plan_remaining_requirements($requirements) > 0) && $iterations > 0) {

    foreach ($quarters as $quarter_id => $quarter) {
      $log .= $quarter . ' ' . ($plan->plan_base_year + $year) . "\n";
      $log .= 'Current Credits: ' . $cumulative_credits . "\n";
      if (($year > 0 || $quarter_id >= $plan_options['basic_info']['quarter'])) {
        graduation_planner_plan_arrange_classes($plan, $requirements, $placed_classes, $plan_options['basic_info']['max_credits'], $quarter_id, $year, $cumulative_credits, $log);
      }
    }

    $year++;
    $iterations--;
  }
  $program = graduation_planner_program_load($plan_options['program_info']['program']);
  $plan->department_id = $program->department_id;
  $department = graduation_planner_department_load($program->department_id);
  graduation_planner_department_users_update_db($department, $plan_options['basic_info']['plan_owner'], array('student' => 1));

  entity_save('graduation_planner_plan', $plan);
  return $plan;
}

/**
 * Graduation Planner planning wizard.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 * @param object $account
 *    (Optional) The user whose plan is being generated.
 * @param object $plan
 *    (Optional) The plan object being edited, if it exists.
 *
 * @return array
 *    A form array.
 */
function graduation_planner_plan_form(array $form, array &$form_state, $account = NULL, $plan = NULL) {

  if (!isset($account)) {
    if (isset($plan)) {

      $account = user_load($plan->uid);
    }
    else {
      global $user;
      $account = clone $user;
    }
  }

  if (isset($plan) || isset($form_state['values']['plan_id'])) {
    drupal_set_message(t('A plan for this user already exists.  Clicking Previous, Next or Save will recreate the plan, except for Completed or In Progress classes.'), 'warning');
    $form['plan_id'] = array(
      '#type' => 'hidden',
      '#value' => isset($plan->plan_id) ? $plan->plan_id : $form_state['values']['plan_id'],
    );
  }

  if (empty($form_state['step'])) {
    $form_state['step'] = 1;

    // This array contains the function to be called at each step to get the
    // relevant form elements. It will also store state information for each
    // step.
    $form_state['step_information'] = graduation_planner_form_steps();
  }
  if (isset($plan)) {
    foreach ($form_state['step_information'] as $step_id => $step) {
      $form_state['step_information'][$step_id]['stored_values'] = $plan->plan_data[$step['name']];
    }
  }
  $step = &$form_state['step'];
  drupal_set_title(t('Graduation Planner Wizard: Step @step', array('@step' => $step)));

  _graduation_planner_plan_steps_tab_bar($form, $form_state, $step);
  $form += $form_state['step_information'][$step]['form']($form, $form_state, $account, $step);
  if ($step > 1) {
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('graduation_planner_plan_form_previous_submit'),
      '#limit_validation_errors' => array(),
    );
  }
  if ($step < count($form_state['step_information'])) {
    // The Next button should be included on every step
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#name' => 'next',
      '#submit' => array('graduation_planner_plan_form_next_submit'),
    );
    if (isset($plan)) {
      $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#name' => 'save',
      );
    }
  }
  else {

    if (isset($plan)) {
      $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#name' => 'save',
      );
    }
    else {
      $form['finish'] = array(
        '#type' => 'submit',
        '#value' => t('Finish'),
      );
    }
  }
  if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
    $form['next']['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
    $form['finish']['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
  }

  return $form;
}

/**
 * Form submission handler for using tab bar buttons.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 */
function graduation_planner_plan_form_direct_submit(array $form, array &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  $step_name = explode('-', $form_state['triggering_element']['#name']);
  $step = _graduation_planner_plan_get_step_by_name($step_name[1]);
  if ($current_step != $step) {
    $current_step = $step;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    // Force rebuild with next step.
    $form_state['rebuild'] = TRUE;  
    return;
  }
}

/**
 * Wizard submission handler for next button.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    Form state, passed by reference.
 */
function graduation_planner_plan_form_next_submit(array $form, array &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  if ($current_step < count($form_state['step_information'])) {
    $current_step++;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    if (isset($form_state['values']['plan_id'])) {
      _graduation_planner_plan_save_plan_options($form_state);
    }
    // Force rebuild with next step.
    $form_state['rebuild'] = TRUE;  
    return;
  }
}

/**
 * Form utility function for saving the current plan incrementally.
 *
 * @param array $form_state
 *    The form state, passed by reference.
 *
 * @todo Figure out a way of regenerating the plan later, instead of every time.
 */
function _graduation_planner_plan_save_plan_options(array &$form_state) {

  $steps = graduation_planner_form_steps();
  $plan_options = array();
  foreach ($steps as $step_id => $step_info) {
    if (isset($form_state['step_information'][$step_id]['stored_values'])) {
      $plan_options[$step_info['name']] = $form_state['step_information'][$step_id]['stored_values'];
    }
  }

  $form_state['plan_options'] = $plan_options;
  if (isset($form_state['values']['plan_id'])) {
    $original_plan = graduation_planner_plan_load($form_state['values']['plan_id']);
    graduation_planner_plan_generate_plan($plan_options, $original_plan);
  }
  else {
    graduation_planner_plan_generate_plan($plan_options);
  }
}

/**
 * Wizard submission handler for previous button.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    Form state, passed by reference.
 */
function graduation_planner_plan_form_previous_submit(array $form, array &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    $current_step--;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  if (isset($form_state['values']['plan_id'])) {
    _graduation_planner_plan_save_plan_options($form_state);
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Wizard submission handler for submit button.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    Form state, passed by reference.
 *
 * @return array
 *    The form array after submission is complete.
 */
function graduation_planner_plan_form_submit(array $form, array &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  $steps = graduation_planner_form_steps();
  $plan_options = array();
  foreach ($steps as $step_id => $step_info) {
    if (isset($form_state['step_information'][$step_id]['stored_values'])) {
      $plan_options[$step_info['name']] = $form_state['step_information'][$step_id]['stored_values'];
    }
  }

  $form_state['plan_options'] = $plan_options;
  if (isset($form_state['values']['plan_id'])) {
    $original_plan = graduation_planner_plan_load($form_state['values']['plan_id']);
    $plan = graduation_planner_plan_generate_plan($plan_options, $original_plan);
  }
  else {
    $plan = graduation_planner_plan_generate_plan($plan_options);
  }

  $uri = $plan->uri();
  $form_state['redirect'] = $uri['path'];
  return $form;
}

/**
 * Wizard basic information form.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    Form state, passed by reference.
 * @param object $account
 *    The user this plan is for.
 * @param int $step_id
 *    The current step.
 *
 * @return array
 *    The completed form array.
 */
function graduation_planner_plan_basic_info_form(array $form, array &$form_state, $account, $step_id) {

  if (isset($form_state['step_information'][$step_id]['stored_values'])) {
    $values = $form_state['step_information'][$step_id]['stored_values'];
  }
  $form['plan_owner'] = array(
    '#type' => 'hidden',
    '#default_value' => $account->uid,
  );
  $form['academic_year'] = array(
    '#type' => 'select',
    '#options' => graduation_planner_academic_years(),
    '#title' => t('Academic year'),
    '#default_value' => isset($values['academic_year']) ? $values['academic_year'] : 0,
  );
  $form['quarter'] = array(
    '#type' => 'select',
    '#title' => t('Quarter'),
    '#description' => t('The quarter the plan begins'),
    '#options' => graduation_planner_plan_get_terms(),
    '#default_value' => isset($values['quarter']) ? $values['quarter'] : 0,
  );
  $form['allow_summer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow summer quarter'),
    '#default_value' => isset($values['allow_summer']) ? $values['allow_summer'] : 0,
  );

  $form['max_credits'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($values['max_credits']) ? $values['max_credits'] : 18,
    '#title' => t('Maximum credits'),
  );
  return $form;
}

/**
 * Get a list of academic programs to choose from.
 *
 * @return array
 *    An array of potential programs to choose from.
 */
function graduation_planner_plan_get_program_options() {
  $options = array();
  $programs = graduation_planner_program_get_programs();
  foreach ($programs as $program) {
    $options[$program->program_id] = graduation_planner_program_title($program);
  }
  return $options;
}

/**
 * Wizard programs form.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    Form state, passed by reference.
 * @param user $account
 *    The user this plan is for.
 * @param int $step_id
 *    The current step.
 *
 * @return array
 *    The completed form array.
 *
 * @todo allow multiple programs to be selected.
 */
function graduation_planner_plan_programs_form(array $form, array &$form_state, $account, $step_id) {
  if (isset($form_state['step_information'][$step_id]['stored_values'])) {
    $values = $form_state['step_information'][$step_id]['stored_values'];
  }
  $form['program'] = array(
    '#type' => 'select',
    '#options' => graduation_planner_plan_get_program_options(),
    '#empty_option' => t('-- Select --'),
    '#empty_value' => 0,
    '#required' => TRUE,
    '#title' => t('Program of Study'),
    '#default_value' => isset($values['program']) ? $values['program'] : 0,
  );
  return $form;
}

/**
 * Wizard general education form.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    Form state, passed by reference.
 * @param user $account
 *    The user this plan is for.
 * @param int step_id
 *    The current step.
 *
 * @return array
 *    The completed form array.
 *
 * @todo refactor this into a program-specific form.
 */
function graduation_planner_plan_general_education_form(array $form, array &$form_state, $account, $step_id) {
  $program = graduation_planner_program_load(2);
  if (isset($form_state['values'])) {
    $step_id = $form_state['step'];
    $form_state['step_information'][$step_id]['stored_values'] = $form_state['values'];
  }
  if (isset($form_state['step_information'][$step_id]['stored_values'])) {
    $values = $form_state['step_information'][$step_id]['stored_values'];
  }
  $required_courses = graduation_planner_program_get_course_requirements($program);
  $form['transfer'] = array(
    '#type' => 'select',
    '#title' => t('Transfer Status'),
    '#options' => _graduation_planner_plan_transfer_options(),
    '#default_value' => isset($values['transfer']) ? $values['transfer'] : 0,
    '#ajax' => array(
      'callback' => 'graduation_planner_plan_general_education_form_ajax',
      'wrapper' => 'gen-ed-wrapper',
    ),
  );
  $form['gen_ed'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Gen Eds Previously Completed'),
    '#prefix' => '<div id="gen-ed-wrapper">',
    '#suffix' => '</div>',
  );

  $dta = ($values['transfer'] == 'dta') ? TRUE : FALSE;

  foreach ($required_courses as $course) {
    $form['gen_ed'][$course['course']->class_id] = array(
      '#type' => 'checkbox',
      '#title' => t('@class_title', array('@class_title' => graduation_planner_class_title($course['course']))),
      '#disabled' => $dta,
      '#default_value' => ($dta || (isset($values['gen_ed'][$course['course']->class_id]) ? $values['gen_ed'][$course['course']->class_id] : FALSE)),
    );
  }
  return $form;
}

/**
 * Get an array of course_ids with completion values.
 *
 * @param object $plan
 *    The plan object.
 *
 * @return array
 *    An array of courses with completion values
 */
function _graduation_planner_plan_course_completion_status($plan) {
  $courses = array();
  foreach ($plan->plan_courses[LANGUAGE_NONE] as $value) {
    $courses[$value['course_id']] = $value['course_completed'];
  }
  return $courses;
}

/**
 * Wizard program requirements form.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    Form state, passed by reference.
 * @param object $account
 *    The user this plan is for.
 * @param int $step_id
 *    The current step.
 *
 * @return array
 *    The completed form array.
 *
 * @todo refactor to allow for multiple programs, including gen-ed.
 */
function graduation_planner_plan_program_requirements_form(array $form, array &$form_state, $account, $step_id) {
  if (isset($form_state['step_information'][$step_id]['stored_values'])) {
    $values = $form_state['step_information'][$step_id]['stored_values'];
  }
  $gen_ed_step_id = _graduation_planner_plan_get_step_by_name('gen_ed_info');
  if ($gen_ed_step_id !== FALSE) {
    $gen_ed = $form_state['step_information'][$gen_ed_step_id]['stored_values']['gen_ed'];
  }
  else {
    $gen_ed = array();
  }
  if (isset($form_state['values']['plan_id'])) {
    $plan = graduation_planner_plan_load($form_state['values']['plan_id']);
    $courses = _graduation_planner_plan_course_completion_status($plan);
  }
  $program_info = $form_state['step_information'][3]['stored_values'];
  $program = graduation_planner_program_load($program_info['program']);
  $required_courses = graduation_planner_program_get_course_requirements($program, FALSE);
  $form['program_requirements'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Previously completed program requirements'),
  );

  foreach ($required_courses as $course) {
    if (isset($course['course'])) {

      if (isset($gen_ed[$course['course']->class_id]) && $gen_ed[$course['course']->class_id] == 1) {
        $default_value = $gen_ed[$course['course']->class_id];
        $locked = TRUE;
        $title = check_plain(graduation_planner_class_title($course['course'])) . ' [completed Gen Ed requirement]';
      }
      elseif (isset($courses) && $courses[$course['course']->class_id] == 1) {
        $default_value = $courses[$course['course']->class_id];
        $locked = TRUE;
        $title = check_plain(graduation_planner_class_title($course['course'])) . ' [set completed by advisor]';
      }
      else {
        $title = check_plain(graduation_planner_class_title($course['course']));
        $default_value = isset($values['program_requirements'][$course['course']->class_id]) ? $values['program_requirements'][$course['course']->class_id] : FALSE;
        $locked = FALSE;
      }
      $form['program_requirements'][$course['course']->class_id] = array(
        '#type' => 'checkbox',
        '#title' => check_plain($title),
        '#default_value' => $default_value,
        '#disabled' => $locked,
      );
    }
  }

  return $form;
}

/**
 * Get completed courses.
 *
 * Using program requirements as a guide, create an array of all completed
 * courses.
 *
 * @param array $plan_options
 *    The plan options array.
 *
 * @return array
 *    A complete chain of completed courses.
 */
function graduation_planner_plan_get_completed(array $plan_options) {
  $gen_ed = graduation_planner_program_load(2);
  $major = graduation_planner_program_load($plan_options['program_info']['program']);
  $gen_ed_taken = $plan_options['gen_ed_info']['gen_ed'];
  $major_taken = $plan_options['program_requirements']['program_requirements'];

  $temp_gen_ed_requirements = graduation_planner_program_get_course_requirements($gen_ed);
  $completed = array();
  foreach ($temp_gen_ed_requirements as $course_id => $requirement) {
    if (isset($gen_ed_taken[$course_id]) && $gen_ed_taken[$course_id] == 1) {
      $completed[$course_id] = $requirement;
    }
  }
  $temp_major_requirements = graduation_planner_program_get_course_requirements($major, FALSE);
  
  foreach ($temp_major_requirements as $course_id => $requirement) {
    if (isset($major_taken[$course_id]) && $major_taken[$course_id] == 1) {

      $completed[$course_id] = $requirement;
    }
  }
  return graduation_planner_program_create_chain($completed, FALSE);
}

/**
 * Get a list of all requirements.
 *
 * Using program requirements as a guide, create an array of all required
 * courses.  If $keep_completed is FALSE, then only remaining requirements are
 * returned.
 *
 * @param array $plan_options
 *    The plan options array.
 *
 * @return array
 *    A chain of required courses.
 */
function graduation_planner_plan_generate_plan_requirements(array $plan_options, $keep_completed = FALSE) {
  $gen_ed = graduation_planner_program_load(2);
  $major = graduation_planner_program_load($plan_options['program_info']['program']);
  $gen_ed_taken = $plan_options['gen_ed_info']['gen_ed'];
  $major_taken = $plan_options['program_requirements']['program_requirements'];
  if (isset($plan_options['elective_info']['electives']['elective_options'])) {
    $major_elective = $plan_options['elective_info']['electives']['elective_options'];
  }
  else {
    $major_elective = array();
  }
  $temp_gen_ed_requirements = graduation_planner_program_get_course_requirements($gen_ed);
  $requirements = array();
  foreach ($temp_gen_ed_requirements as $course_id => $requirement) {
    if (!isset($gen_ed_taken[$course_id]) || $gen_ed_taken[$course_id] == 0) {
      $requirements[$course_id] = $requirement;
    }
  }
  $temp_major_requirements = graduation_planner_program_get_course_requirements($major, FALSE);

  foreach ($temp_major_requirements as $course_id => $requirement) {
    if (!isset($major_taken[$course_id]) || $major_taken[$course_id] == 0) {
      
      $requirements[$course_id] = $requirement;
    }
  }
  $temp_major_electives = graduation_planner_program_get_course_requirements($major, TRUE);
  $electives_generated = isset($plan_options['elective_info']['electives_completed']) ? $plan_options['elective_info']['electives_completed'] : 0;
  foreach ($temp_major_electives as $course_id => $requirement) {
    if (isset($major_elective[$course_id]) && $major_elective[$course_id] == 1) {
      $elective_course = graduation_planner_class_load($requirement['course_id']);

      $requirements[$course_id] = $requirement;
    }
  }

  usort($requirements, 'graduation_planner_plan_sort_by_order');

  $chain = graduation_planner_program_create_chain($requirements);
  $elective_course = graduation_planner_class_load($major->options['placeholder_elective']);
  if (isset($elective_course) && is_object($elective_course)) {
    $sequence = 0;
    $elective_course_requirements = graduation_planner_class_get_requirements($elective_course);
    if (!empty($elective_course_requirements)) {
      foreach ($elective_course_requirements as $requirement) {
        $elective_course_requirement_ids[] = $requirement['course_id'];
      }
    }
    while ($electives_generated < $major->elective_credits) {

      $chain[$elective_course->class_id . '-' . $sequence++] = array(
        'requirements' => $elective_course_requirement_ids,
        'class' => $elective_course,
        'units' => $elective_course->class_units,
        'quarters_available' => array_filter(graduation_planner_class_quarters_available_field_data($elective_course)),
        'required_standing' => $elective_course->class_standing,
        'required' => $elective_course->class_required,
        'priority' => 100 * $major->program_id,
        'order' => 100,
        'place' => 1,
      );
      $electives_generated += $elective_course->class_units;
    }
  }

  return $chain;
}

/**
 * Get a total number of credits, based on an array of course ids.
 *
 * @param array $course_ids
 *    An array of course ids.
 *
 * @return int  
 *    Return the total number of credits.
 *
 * @todo Account for course substitutions.
 */
function graduation_planner_plan_get_total_credits(array $course_ids) {
  $credits = 0;
  $classes = graduation_planner_class_load_multiple(array_keys($course_ids));
  foreach ($classes as $class) {
    $credits += $class->class_units;
  }
  return $credits;
}

/**
 * Get a total number of classes remaining within the requirements array.
 *
 * @param array $requirements
 *    An array of requirements.
 *
 * @return int
 *    The number of classes remaining to be placed.
 *
 * @todo Makes this more efficient, or less necessary.
 */
function graduation_planner_plan_remaining_requirements(array $requirements) {
  $count = 0;
  foreach ($requirements as $requirement) {
    $count += $requirement['required'];
  }
  return $count;
}

/**
 * Place 'unplaced' classes.
 *
 * Some required courses can be left unplaced for later placement by an advisor.
 *
 * @param object $plan
 *    The plan object, passed by reference.
 * @param array $requirements
 *    An array of requirements, passed by reference.
 * @param array $placed_classes
 *    An array of placed classes, passed by reference..
 * @param int $cumulative_credits
 *    The total number of credits placed, passed by reference.
 */
function graduation_planner_plan_place_unplaced_classes(&$plan, array &$requirements, array &$placed_classes, &$cumulative_credits) {
  foreach ($requirements as $requirement_id => $requirement) {
    if (isset($requirement['#children'])) {
      graduation_planner_plan_place_unplaced_classes($plan, $requirement['#children'], $placed_classes, $cumulative_credits);
    }
    else {
      if ($requirements[$requirement_id]['place'] == 0) {
        $placed_classes[$requirement_id] = $requirement_id;
        $plan->field_plan_courses[LANGUAGE_NONE][] = array(
          'course_id' => $requirements[$requirement_id]['class']->class_id,
          'course_term' => 0,
          'course_year' => 0,
          'course_completed' => 0,
          'course_locked' => 0,
          'course_section' => 0,
          'course_placed' => 0,
        );
        $cumulative_credits += $requirement['units'];
        unset($requirements[$requirement_id]);
      }
    }
  }
}

/**
 * Determine if any requirements have earlier requirements.
 *
 * @param array $requirements
 *    An array of requirements.
 * 
 * @return bool
 *    True if earlier requirements exist, FALSE otherwise.
 */
function _graduation_planner_plan_earlier_requirements_remain(array $requirements) {
  foreach ($requirements as $requirement) {
    if ($requirement['place'] < 3) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Arrange classes in plan.
 *
 * @param object $plan
 *    The plan object, passed by reference.
 * @param array $requirements
 *    An array of required classes, passed by reference.
 * @param array $placed_classes
 *    An array of classes previously placed, passed by reference.
 * @param int $available_credits
 *    Available credits for placement, this term.
 * @param int $quarter_id
 *    The term id.
 * @param int $year
 *    The year number.
 * @param int $cumulative_credits
 *    Total credits previously placed, passed by reference.
 * @param string $log
 *    Placement log, passed by reference.
 *
 * @return array
 *    An array of all classes placed this term.
 */
function graduation_planner_plan_arrange_classes(&$plan, array &$requirements, array &$placed_classes, $available_credits, $quarter_id, $year, &$cumulative_credits, &$log) {
  $placed = array();
  $total_credits = 0;
  $temp_requirements = graduation_planner_plan_filter_by_quarter($requirements, $quarter_id);
  $temp_placed_classes = $placed_classes;

  foreach ($temp_requirements as $requirement_id => $requirement) {
    $log .= 'Attempting to place ' . graduation_planner_class_title($requirements[$requirement_id]['class']) . "\n";
    $remaining_requirements = array_diff($requirement['requirements'], $placed_classes);
    $can_place = 1;
    if ($requirement['place'] == 3 && _graduation_planner_plan_earlier_requirements_remain($requirements)) {
      $can_place &= 0;
    }
    if (empty($remaining_requirements)) {
      $can_place &= 1;
    }
    else {
      $log .= 'Unmet Requirements for ' . graduation_planner_class_title($requirements[$requirement_id]['class']) . "\n";
      $log .= print_r($remaining_requirements, TRUE) . "\n";
      $can_place &= 0;
    }
    if (isset($requirement['quarters_available'][$quarter_id]) && $requirement['quarters_available'][$quarter_id] == 1) {
      $can_place &= 1;
    }
    else {
      $log .= 'Cannot place ' . graduation_planner_class_title($requirements[$requirement_id]['class']) . ": not available this quarter\n";
      $can_place &= 0;
    }
    if ($requirement['required_standing'] <= $cumulative_credits) {
      $can_place &= 1;
    }
    else {
      $log .= 'Cannot place ' . graduation_planner_class_title($requirements[$requirement_id]['class']) . ': too low of class standing' . "\n";
      $can_place &= 0;
    }

    if ($can_place) {
      if (($available_credits - $total_credits) >= $requirement['units']) {
        $temp_placed_classes[$requirement_id] = $requirement_id;
        
        $plan->field_plan_courses[LANGUAGE_NONE][] = array(
          'course_id' => $requirements[$requirement_id]['class']->class_id,
          'course_term' => $quarter_id,
          'course_year' => $plan->plan_base_year + $year,
          'course_completed' => 0,
          'course_locked' => 0,
          'course_section' => 0,
          'course_placed' => 1,
        );

        $total_credits += $requirement['units'];
        $log .= 'Placed ' . graduation_planner_class_title($requirements[$requirement_id]['class']) . "\n";

        unset($requirements[$requirement_id]);
      }
      elseif ($total_credits >= $available_credits) {
        $log .= 'Cannot place ' . graduation_planner_class_title($requirements[$requirement_id]['class']) . ': credits already exceed capacity' . "\n";
        break;
      }
      else {
        $log .= 'Cannot place ' . graduation_planner_class_title($requirements[$requirement_id]['class']) . ': Not enough credits available to place. total credits: ' . $total_credits . ' available credits: ' . $available_credits . "\n";
        break;
      }
    }
    else {
      $log .= 'Not enough credits available to place ' . graduation_planner_class_title($requirements[$requirement_id]['class']) . "\n";
    }
  }
  $placed_classes = $temp_placed_classes;
  $cumulative_credits += $total_credits;
  return $placed;
}

/**
 * Helper function for sorting courses by priority.
 *
 * @param array $a
 *    The left side array.
 * @param array $b
 *    The right side array.
 * 
 * @return int
 *    Return 1 if higher priority, -1 if lower priority.
 */
function graduation_planner_plan_sort_by_order(array $a, array $b) {
  if ($a['priority'] == $b['priority']) {
    
  }
  return ($a['priority'] < $b['priority']) ? -1 : 1;
}

/**
 * Filter the requirements based on term available.
 *
 * @param array $requirements
 *    An array of requirements.
 * @param int $quarter_id
 *    The term to filter for.
 *
 * @return array
 *    An array of requirements that will fit in this quarter.
 */
function graduation_planner_plan_filter_by_quarter(array $requirements, $quarter_id) {
  $required_courses = array();
  $elective_courses = array();
  foreach ($requirements as $requirement_id => $requirement) {
    if (isset($requirement['#children'])) {
      $required_courses[$requirement_id]['#children'] = graduation_planner_plan_filter_by_quarter($requirement['#children'], $quarter_id);
    }
    if (isset($requirement['quarters_available'][$quarter_id]) && $requirement['quarters_available'][$quarter_id] == 1) {
      if ($requirement['required'] == 1) {
        $required_courses[$requirement_id] = $requirement;
      }
      else {
        $elective_courses[$requirement_id] = $requirement;
      }
    }
  }

  return $required_courses + $elective_courses;
}

/**
 * Validate that the chosen electives meet the requirements.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 */
function graduation_planner_plan_electives_form_validate(array $form, array &$form_state) {
  if ($form_state['values']['total_electives_required_hidden'] > $form_state['values']['electives']['electives_selected_hidden']) {
  }
}

/**
 * Choose Electives form.
 *
 * @param array $form
 *    The initial form generated by the form-builder functions.
 * @param array $form_state
 *    The current form state, passed by reference.
 * @param object $user
 *    The user.
 *
 * @return array
 *    The electives form array.
 */
function graduation_planner_plan_electives_form(array $form, array &$form_state, $user) {
  $program_info = $form_state['step_information'][3]['stored_values'];
  $program = graduation_planner_program_load($program_info['program']);

  $form['total_electives_required'] = array(
    '#type' => 'item',
    '#markup' => t('Total elective credits required: @credits', array('@credits' => $program->elective_credits)),
  );
  $form['total_electives_required_hidden'] = array(
    '#type' => 'hidden',
    '#value' => $program->elective_credits,
  );
  $form['electives_completed'] = array(
    '#type' => 'textfield',
    '#default_value' => 0,
    '#title' => t('Electives Completed:'),
  );
  if (isset($program->options['allow_choose_electives']) && $program->options['allow_choose_electives']) {
    $electives = graduation_planner_program_get_elective_options($program);

    $form['electives'] = array(
      '#type' => 'container',
      '#prefix' => '<div id="electives-wrapper">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
    );
    $form['electives']['elective_options'] = array(
      '#tree' => TRUE,
    );
    unset($form_state['values']['electives']['elective_options']);
    $electives_selected = array();

    if (isset($form_state['values']['electives']['elective_options'])) {
      $elective_requirements = array();
      foreach ($form_state['values']['electives']['elective_options'] as $class_id => $value) {
        $electives_selected[$class_id] = array(
          'name' => graduation_planner_class_title($electives[$class_id]),
          'value' => $value,
          'locked' => 0,
        );
      }
      foreach ($electives_selected as $elective_id => $elective_selected) {
        if ($elective_selected['value'] == 1) {
          $requirements = graduation_planner_class_get_requirement_chain($electives[$elective_id]);

          foreach ($requirements as $requirement_key => $requirement) {
            if (isset($electives[$requirement_key])) {
              $elective_requirements[$requirement_key] = array(
                'name' => graduation_planner_class_title($electives[$requirement_key]),
                'locked' => 1,
                'value' => 1,
              );
            }
          }
        }
      }
      $electives_selected = array_intersect_key($elective_requirements + $electives_selected, $electives);
    }

    foreach ($electives as $elective) {
      $form['electives']['elective_options'][$elective->class_id] = array(
        '#type' => 'checkbox',
        '#title' => t('@class_title', array('@class_title' => graduation_planner_class_title($elective))),
        '#disabled' => isset($electives_selected[$elective->class_id]['locked']) ? $electives_selected[$elective->class_id]['locked'] : 0,
        '#default_value' => isset($electives_selected[$elective->class_id]['value']) ? $electives_selected[$elective->class_id]['value'] : 0,
        '#ajax' => array(
          'callback' => 'graduation_planner_plan_electives_form_ajax',
          'wrapper' => 'electives-wrapper',
        ),
      );
    }
    $form['electives']['electives_selected'] = array(
      '#type' => 'item',
      '#markup' => t('Total electives chosen: @credits', array('@credits' => _graduation_planner_plan_count_electives_chosen($electives, $electives_selected)))
    );
    $form['electives']['electives_selected_hidden'] = array(
      '#type' => 'hidden',
      '#value' => _graduation_planner_plan_count_electives_chosen($electives, $electives_selected),
    );
  }
  return $form;
}

/**
 * Helper function to display the current status of the planned course.
 *
 * @param object $plan_course
 *    The planned course object.
 *
 * @return string
 *    The friendly name of the course status.
 */
function _graduation_planner_plan_course_status($plan_course) {
  if ($plan_course['course_placed'] > 0) {
    switch ($plan_course['course_completed']) {
      case 0:
        return ($plan_course['course_section'] > 0) ? 'In Progress' : 'Planned';
        break;
      
      case 1:
        return 'Complete';
        break;
      
    }
  }
  return 'Unplanned';
}

/**
 * Get the total number of units for the array of courses.
 *
 * @param array $courses
 *    An array of courses.
 *
 * @return int
 *    A total number of units for the courses.
 *
 * @todo Refactor to account for substitute courses.
 */
function _graduation_planner_plan_count_course_units(array $courses) {
  $units = 0;
  foreach ($courses as $course) {
    $units += $course['class']->class_units;
  }
  return $units;
}

/**
 * Get the total number of units for the array of electives.
 *
 * @param array $electives
 *    An array of electives.
 * @param array $electives_selected
 *    An array of selected electives.
 * 
 * @return int
 *    A total number of units for the courses.
 *
 * @todo Refactor to account for substitute courses.
 */
function _graduation_planner_plan_count_electives_chosen(array $electives, array $electives_selected) {
  $count = 0;
  foreach ($electives_selected as $index => $selected) {
    if ($selected['value'] == 1) {
      $count += $electives[$index]->class_units;
    }
  }
  return $count;
}

/**
 * AJAX callback for gen_ed form options.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 *
 * @return array
 *    A portion of the changed form array.
 */
function graduation_planner_plan_general_education_form_ajax($form, &$form_state) {

  $form_state['rebuild'] = TRUE;
  return $form['gen_ed'];
}

/**
 * AJAX callback for electives form options.
 *
 * @param array $form
 *    The form array.
 * @param array $form_state
 *    The form state, passed by reference.
 *
 * @return array
 *    A portion of the changed form array.
 */
function graduation_planner_plan_electives_form_ajax($form, &$form_state) {

  $form_state['rebuild'] = TRUE;
  return $form['electives'];
}

/**
 * An array of potential transfer codes.
 *
 * @return array
 *    An array of transfer statuses.
 */
function _graduation_planner_plan_transfer_options() {
  return array(
    'no_transfer' => t('Not a transfer student'),
    'transfer_student' => t('Transfer Student / AA'),
    'dta' => t('Direct Transfer Agreement AA'),
  );
}

/**
 * The GraduationPlannerPlan entity.
 */
class GraduationPlannerPlan extends Entity {

  /**
   * Returns the title of this object.
   *
   * @return string
   *    The title of the plan.
   */
  protected function defaultLabel() {
    return $this->title;
  }

  /**
   * The default URI of the plan.
   *
   * @return array
   *    A URI array containing a path.
   */
  protected function defaultUri() {
    return array('path' => 'plan/' . $this->identifier());
  }

}

/**
 * GraduationPlannerPlanController entity controller.
 */
class GraduationPlannerPlanController extends EntityAPIController {

  /**
   * Default Creation Function.
   *
   * @param array $values
   *    An array of passed values.
   * @return mixed
   *    Returns whatever the parent class returns.
   */
  public function create(array $values = array()) {

    $values += array(
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      'type' => 'graduation_planner_plan',
    );
    return parent::create($values);
  }

  /**
   * Boilerplate Object builder.
   *
   * @param object $entity
   *    The entity.
   * @param string $view_mode
   *    The view mode.
   * @param string $langcode
   *    The language code.
   * @param array $content
   *    An array of content previously generated.
   * 
   * @return array
   *    The renderable array returned by the builder parent.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, array $content = array()) {

    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }

}

/**
 * Implements hook_entity_info().
 */
function graduation_planner_plan_entity_info() {
  $entities = array();
  $entities['graduation_planner_plan'] = array(
    'label' => t('Graduation Planner - Program'),
    'entity class' => 'GraduationPlannerPlan',
    'controller class' => 'GraduationPlannerPlanController',
    'base table' => 'graduation_planner_plan',
    'revision table' => 'graduation_planner_plan_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'plan_id',
      'bundle' => 'type',
      'revision' => 'revision_id',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'graduation_planner_plan' => array(
        'label' => t('Graduation Planner - Plan'),
        'admin' => array(
          'path' => 'admin/structure/graduation_planner_plan/manage',
          'access arguments' => array('administer graduation_planner_plan entities'),
        ),
      ),
    ),
    'load hook' => 'graduation_planner_plan_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
      'list' => array(
        'label' => t('List Item'),
        'custom settings' => TRUE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'graduation_planner_plan_uri',
    'module' => 'graduation_planner_plan',
    'access callback' => 'graduation_planner_plan_access',
  );
  return $entities;
}

/**
 * Gets the default URI.
 *
 * @param object $plan
 *    The plan object.
 *
 * @return array
 *    Returns an URI array.
 */
function graduation_planner_plan_uri($plan) {
  return array('path' => 'plan/' . $plan->identifier());  
}

/**
 * Load the plan that belongs to the user.
 *
 * @param user $user
 *    The user to search for.
 * @param object $department
 *    The department object, if there is one.
 *
 * @return array
 *    An array of plans.
 *
 * @todo Refactor to allow for multiple concurrent plans.
 */
function graduation_planner_plan_load_by_user($user, $department = NULL) {
  if (isset($department)) {
    $result = db_query('select gpp.plan_id from {graduation_planner_plan} gpp where gpp.uid = :uid and gpp.department_id = :department_id', array('uid' => $user->uid, 'department_id' => $department->department_id));
  }
  else {
    $result = db_query('select gpp.plan_id from {graduation_planner_plan} gpp where gpp.uid = :uid', array('uid' => $user->uid));
  }
  $plan_ids = $result->fetchAllAssoc('plan_id');
  $plans = graduation_planner_plan_load_multiple(array_keys($plan_ids));
  return $plans;
}

/**
 * Graduation Planner Plan access callback.
 *
 *
 * @param mixed $permission
 *    An string permission, or an array of string permissions.
 * @param object $entity
 *    An entity to test permissions agains.
 *
 * @return boolean
 *    True if permission granted, FALSE otherwise.
 */
function graduation_planner_plan_access($permission, $entity = NULL) {

  global $user;
  if (is_array($permission)) {
    foreach ($permission as $single_permission) {
      if (!isset($access)) {
        $access = TRUE;
      }
      $access &= graduation_planner_plan_access($single_permission);
    }
  }
  else {
    switch ($permission) {
      case 'view own plan':
        $access = graduation_planner_plan_access('view any plan') || (user_access('view own plan') && $entity->uid = $user->uid);
        break;
      
      case 'has plan':
        $access = count(graduation_planner_plan_load_by_user($user)) > 0;
        break;
      
      case 'view any plan':
        $access = user_access('view any plan');
        break;
      
      case 'edit plan':
        $access = user_access('edit any plan') || (user_access('edit own plan') && $entity->uid == $user->uid);
        break;
      
      default:
        $access = FALSE;
        break;
      
    }
  }
  return $access;
}

/**
 * Graduation Planner Plan loading function.
 * 
 * @param int $plan_id
 *    The plan id to search for.
 * @param bool $reset
 *    Reset the static cache.
 * 
 * @return object
 *    The plan object, if found.
 */
function graduation_planner_plan_load($plan_id, $reset = FALSE) {
  $plan_ids = (isset($plan_id) ? array($plan_id) : array());
  $plan = graduation_planner_plan_load_multiple($plan_ids, array(), $reset);
  return $plan ? reset($plan) : FALSE;
}

/**
 * Graduation Planner Plan multiple loading function.
 * 
 * @param array $plan_ids
 *    An array of plan ids.
 * @param array $conditions
 *    An array of conditions to filter by.
 * @param bool $reset
 *    Reset the static cache.
 * 
 * @return array
 *    Return an array of entities.
 */
function graduation_planner_plan_load_multiple(array $plan_ids = array(), array $conditions = array(), $reset = FALSE) {
  return entity_load('graduation_planner_plan', $plan_ids, $conditions, $reset);
}

/**
 * Plan view function.
 * 
 * @param object $plan
 *    The plan object.
 * @param string $view_mode
 *    The view mode.
 * 
 * @return array
 *    A renderable content array.
 */
function graduation_planner_plan_view($plan, $view_mode = 'full') {
  $plan->content = array();
  $plan->content = entity_get_controller($plan->type)->buildContent($plan, $view_mode);
// Build fields content - this where the FieldAPI really comes in to play. The task
// is relatively trivial for us - it all gets taken care of by Drupal core.
  //field_attach_prepare_view('graduation_planner_class', array($class->class_id => $class), $view_mode);
  //entity_prepare_view('graduation_planner_class', array($class->class_id => $class));
  $plan->content += field_attach_view('graduation_planner_plan', $plan, $view_mode);

  $plan->content += array(
    '#theme' => 'graduation_planner_plan__' . $view_mode,
    '#content' => $plan->content,
    '#view_mode' => $view_mode,
    '#language' => NULL,
  );

  return $plan->content;
}

/**
 * Implements hook_theme().
 */
function graduation_planner_plan_theme($existing, $type, $theme, $path) {
  return array
    (
    'field_graduation_plan_form' => array
      (
      'render element' => 'element',
    ),
    'graduation_planner_plan_class__list' => array
      (
      'template' => 'graduation-planner-plan-class--list',
      'variables' => array('content' => NULL),
      'path' => drupal_get_path('module', 'graduation_planner_plan') . '/templates'
    )
  );
}

/**
 * Implements hook_permission().
 */
function graduation_planner_plan_permission() {
  return array(
    'create plan' => array(
      'title' => t('Create plan'),
      'description' => t('Create plan')
    ),
    'edit own plan' => array(
      'title' => t('Edit Own Plan'),
      'description' => t('Edit Own Plan')
    ),
    'edit any plan' => array(
      'title' => t('Edit Any Plan'),
      'description' => t('Edit Any Plan')
    ),
    'view own plan' => array(
      'title' => t('View Own Plan'),
      'description' => t('View Own Plan')
    ),
    'view any plan' => array(
      'title' => t('View Any Plan'),
      'description' => t('View Any Plan')
    )
  );
}

/**
 * Implements hook_block_info().
 */
function graduation_planner_plan_block_info() {
  return array(
    'plan_data' => array(
      'info' => t('Graduation Planner Plan Dashboard Block'),
      'cache' => DRUPAL_CACHE_PER_USER
    )
  );
}

/**
 * Implements hook_block_view().
 */
function graduation_planner_plan_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'plan_data':
      if (user_is_logged_in() && !user_is_anonymous()) {
        $block['subject'] = t('My plan');
        $block['content'] = graduation_planner_plan_my_plan();
      }
      break;
  }
  return $block;
}

/**
 * Retrieve the plans belonging to the logged-in user.
 * 
 * @return array
 *    A renderable array.
 */
function graduation_planner_plan_my_plan() {
  global $user;
  $query = db_select('graduation_planner_plan', 'gpp');
  $query->fields('gpp', array('plan_id'));
  $query->condition('gpp.uid', $user->uid);
  $result = $query->execute();
  $plan_ids = $result->fetchAllAssoc('plan_id');
  $plans = graduation_planner_plan_load_multiple(array_keys($plan_ids));
  $rows = array();
  foreach ($plans as $plan) {
    $rows[] = array(
      'data' => array(
        'plan' => l(graduation_planner_plan_detailed_title($plan), 'plan/' . $plan->plan_id),
        'status' => graduation_planner_plan_status($plan),
        'progress' => graduation_planner_plan_progress_view($plan),
      )
    );
  }

  $content['table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#empty' => l('Create Plan', 'plan/new'),
    '#header' => array(t('Plan Name'), t('Status'), t('Progress'))
  );
  return $content;
}

/**
 * Displays plan progress.
 * 
 * @param object $plan
 *    The plan object.
 * @return string
 *    The progress report.
 */
function graduation_planner_plan_progress_view($plan) {
  return t('Not Available');
}

/**
 * Returns the status of the plan in text.
 * 
 * @param object $plan
 *    The plan object.
 * @return string
 *    The status of the plan.
 */
function graduation_planner_plan_status($plan) {
  $status = '';
  if (isset($plan->approved_uid)) {
    $advisor = user_load($plan->approved_uid);
    $status .= t('Approved by @advisor', array('@advisor' => format_username($advisor)));
  }
  else {
    $status .= t('Not Approved');
  }
  return $status;
}

/**
 * The title of the program.
 * 
 * @param object $plan
 *    The plan object.
 * @return string
 *    The title of the program the plan belongs to.
 */
function graduation_planner_plan_detailed_title($plan) {
  $program = graduation_planner_program_load($plan->plan_data['program_info']['program']);
  $title = graduation_planner_program_title($program) . ' ' . graduation_planner_format_year($plan->plan_data['basic_info']['academic_year']);
  return $title;
}

/**
 * A page displaying all course substitutions approved by the advisor.
 * 
 * @param object $plan
 *    The plan object.
 * @return array
 *    A renderable array of the course substitutions.
 */
function graduation_planner_plan_course_substitutions($plan) {
  $rows = array();
  if (isset($plan->plan_data['course_substitutions'])) {
    foreach ($plan->plan_data['course_substitutions'] as $substitution) {
      $approved_by_user = user_load($substitution['approved_by_uid']);
      if ($substitution['original_course_id'] > 0) {
        $original_course = graduation_planner_class_load($substitution['original_course_id']);
      }
      if ($substitution['substituted_course_id'] > 0) {
        $substituted_course = graduation_planner_class_load($substitution['substituted_course_id']);
      }
      $rows[] = array(
        'data' => array(
          'original_course' => isset($original_course) ? graduation_planner_class_title($original_course) : $substitution['original_course_title'],
          'substituted_course' => isset($substituted_course) ? graduation_planner_class_title($substituted_course) : $substitution['substituted_course_title'],
          'approved_by' => format_username($approved_by_user)
        )
      );
    }
  }
  $content['substitutions'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => array(t('Original course'), t('Substituted course'), t('Approved By')),
    '#empty' => t('This plan contains no course substitutions')
  );
  return $content;
}

/**
 * 
 * 
 * @param object $planned_class
 * @param object $plan
 * @param int $delta
 * @return int
 */
function _graduation_planner_plan_course_units($planned_class, $plan, $delta) {
  if (!isset($plan->plan_data['course_substitutions'][$delta])) {
    return $planned_class->class_units;
  }
  elseif ($plan->plan_data['course_substitutions'][$delta]['substituted_course_id'] != 0) {
    $substituted_course = graduation_planner_class_load($plan->plan_data['course_substitutions'][$delta]['substituted_course_id']);
    return $substituted_course->class_units;
  }
  else {
    return $plan->plan_data['course_substitutions'][$delta]['substituted_course_units'];
  }
  return 0;
}

function _graduation_planner_plan_validate_course_name($element, &$form_state, $form) {
  if (empty($element['#value'])) {
    form_error($element, t('This field is required.'));
  }
  elseif (!preg_match("/([A-Z]{2,}\s\d{3})(:\s\w*|\n)/", $element['#value'])) {
    form_error($element, t('Course Name must be in the format [SUBJECT] [NUMBER] with {: [Description]} optional.  Examples: MATH 402 or CS 333: Computer Science'));
  }
}

function _graduation_planner_plan_validate_course_units($element, &$form_state, $form) {
  watchdog('_graduation_planner_plan_validate_course_units', print_r($element, TRUE));
  if (empty($element['#value'])) {
    form_error($element, t('Course units field is required.'));
  }
  elseif (!is_numeric($element['#value'])) {
    form_error($element, t('Course units must contain a number'));
  }
  elseif ($element['#value'] < 1 || $element['#value'] > 12) {
    form_error($element, t('Course units must contain a number between 1 and 12'));
  }
}
